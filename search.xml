<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot3学习</title>
      <link href="/2024/11/23/SpringBoot3%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/23/SpringBoot3%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h2><p>springboot框架简化了SSM框架。之前使用SSM框架时，我们需要导入大量的依赖，和配置许多配置类及其相应的注解，太过于繁琐，不好记，而springboot极大的减轻了这些操作，把这些操作都封装了起来，提高开发效率。</p><h2 id="二、快速启动"><a href="#二、快速启动" class="headerlink" title="二、快速启动"></a>二、快速启动</h2><h3 id="2-1-创建Maven工程"><a href="#2-1-创建Maven工程" class="headerlink" title="2.1 创建Maven工程"></a>2.1 创建Maven工程</h3><p>重新创建一个Maven工程，要求无父工程。</p><h3 id="2-2-继承-spring-boot-starter-parent"><a href="#2-2-继承-spring-boot-starter-parent" class="headerlink" title="2.2 继承 spring-boot-starter-parent"></a>2.2 继承 spring-boot-starter-parent</h3><p>在项目的pom文件中添加如下的继承语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--继承springboot父工程--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-添加web启动依赖-spring-boot-starter-web"><a href="#2-3-添加web启动依赖-spring-boot-starter-web" class="headerlink" title="2.3 添加web启动依赖 spring-boot-starter-web"></a>2.3 添加web启动依赖 spring-boot-starter-web</h3><p>整合了spring-webmvc,servlet,jackson等依赖</p><p>不需要指定版本号，上面的父工程已经帮我们指定好了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入web启动器依赖即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-创建一个Main类"><a href="#2-4-创建一个Main类" class="headerlink" title="2.4 创建一个Main类"></a>2.4 创建一个Main类</h3><p>@SpringBootApplication是启动类的注解</p><p>而SpringApplication.run(Main.class, args)是固定的启动类配置语句。</p><p>SpringBoot不需要我们在IDEA里配置tomcat，它已经封装好了，当我们运行main方法时，tomcat就会自己启动。而且它还会自己创建ioc容器和进行包扫描，扫描范围为当前Main类所在的包下的所有类，包括了包下包的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查看@SpringBootApplication源码可知有如下注解功能</span></span><br><span class="line"><span class="comment">    1.@SpringBootConfiguration 声明配置类</span></span><br><span class="line"><span class="comment">    2.@EnableAutoConfiguration 自动加载其他配置类</span></span><br><span class="line"><span class="comment">    3.@ComponentScan 包扫描，默认是当前所在的包</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">//启动类注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//自动创建ioc容器，启动tomcat服务软件</span></span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-创建HelloController类"><a href="#2-5-创建HelloController类" class="headerlink" title="2.5 创建HelloController类"></a>2.5 创建HelloController类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-启动运行"><a href="#2-6-启动运行" class="headerlink" title="2.6 启动运行"></a>2.6 启动运行</h3><p>网址开头默认是localhost:8080</p><p><img src="/../images/image-20241123133343605.png" alt="image-20241123133343605"></p><p>由快速入门可见，springboot相比于SSM实在是太过于方便了，省去了许多麻烦的配置。</p><h2 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h2><h3 id="3-1-统一配置管理概述"><a href="#3-1-统一配置管理概述" class="headerlink" title="3.1 统一配置管理概述"></a>3.1 统一配置管理概述</h3><p>SpringBoot工程下，进行统一的配置管理，你想设置的任何参数（端口号、项目根路径、数据库连接信息等等)都集中到一个固定位置和命名的配置文件（<code>application.properties</code>或<code>application.yml</code>）中！</p><p>配置文件应该放置在SpringBoot工程的<code>src/main/resources</code>目录下。这是因为<code>src/main/resources</code>目录是Spring Boot默认的类路径（classpath），配置文件会被自动加载并可供应用程序访问。</p><p><img src="/../images/image-20241123145118773.png" alt="image-20241123145118773"></p><h3 id="3-2-快速案例"><a href="#3-2-快速案例" class="headerlink" title="3.2 快速案例"></a>3.2 快速案例</h3><p>springboot规定了读取的配置文件名称，application.properties是其中之一，所以我们在resources文件夹下创建application.properties文件即可，它会自动读取该配置文件。</p><p>1.application.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用springboot提供的配置类来修改参数，key是固定的，有需要则查阅官方文档</span><br><span class="line"># server.port指定了服务器开启的端口号</span><br><span class="line">server.port=80</span><br><span class="line"># server.servlet.context-path指定虚拟目录</span><br><span class="line">server.servlet.context-path=/sb</span><br><span class="line"></span><br><span class="line"># 自定义配置key=value</span><br><span class="line">ldy.name=ldy</span><br><span class="line">ldy.age=19</span><br></pre></td></tr></table></figure><p>2.controller层设置访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ldy.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;ldy.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;ldy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ldy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动并访问</p><p><img src="/../images/image-20241123144831465.png" alt="image-20241123144831465"></p><h3 id="3-3-yml-ymal-配置文件"><a href="#3-3-yml-ymal-配置文件" class="headerlink" title="3.3 yml(ymal)配置文件"></a>3.3 yml(ymal)配置文件</h3><p>传统的properties因为key不能重复，所以对key使用多层次的命名方法 如 server.servlet.context-path.每次写都要加上许多相同的前缀，如 server。</p><p>yml相比于properties化繁为简显得更加有层次。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法如下,要求每一层进行一次缩进，然后赋值时需要 :空格value,不能忘记冒号后面先加个空格</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/sb</span></span><br><span class="line"><span class="attr">ldy:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ldy</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">19</span></span><br></pre></td></tr></table></figure><p>此外，yaml还支持集合赋值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ldy:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ggbone</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">    <span class="attr">hbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eat</span></span><br></pre></td></tr></table></figure><h3 id="3-4配置文件读取"><a href="#3-4配置文件读取" class="headerlink" title="3.4配置文件读取"></a>3.4配置文件读取</h3><p>之前在SSM框架的学习中，学会了使用@Value注解，而在springboot中有着更加简便使用的**@ConfigurationProperties**注解。可以进行批量配置以及读取集合。以下是快速案例。</p><p>1.User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 读取配置文件的方式1：@Value</span></span><br><span class="line"><span class="comment">*   1.直接在属性上添加@Value</span></span><br><span class="line"><span class="comment">*   2.@Value(key的全名)</span></span><br><span class="line"><span class="comment">*   3.不能读取集合并赋值</span></span><br><span class="line"><span class="comment">* 方式2：@ConfigurationProperties</span></span><br><span class="line"><span class="comment">*   优点：1.添加在类上，批量配置</span></span><br><span class="line"><span class="comment">*        2.可以给集合赋值</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;ldy.user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;ldy.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;ldy.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//    @Value(&quot;$&#123;ldy.user.hbs&#125;&quot;) //报错，不能读取集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hbs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动并访问</p><p><img src="/../images/image-20241123153008538.png" alt="image-20241123153008538"></p><h3 id="3-5多环境配置和激活"><a href="#3-5多环境配置和激活" class="headerlink" title="3.5多环境配置和激活"></a>3.5多环境配置和激活</h3><p>当我们把所有配置信息都塞到application.yaml配置文件时，该文件会显得相当冗杂，所以，我们可以进行多环境的配置和激活，将应用程序的配置参数分离到不同的属性文件中，每个环境对应一个属性文件。只需要在application.yaml文件里指定激活的配置文件即可。</p><p>激活方式见下application.yaml文件。</p><p>要求，其他配置文件的命名规范为application-xxx.yaml。</p><p><img src="/../images/image-20241123154442847.png" alt="image-20241123154442847"></p><p>1.application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ldy:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ggbone</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">11</span></span><br><span class="line">    <span class="attr">hbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eat</span></span><br><span class="line"><span class="comment">#激活方式：</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">druid</span></span><br></pre></td></tr></table></figure><p>2.application-druid.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">druid:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">ldy:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">bk201</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">25</span></span><br></pre></td></tr></table></figure><p>当激活的配置文件的key和application的key有重复时，以激活的配置文件的value值为主。如下图所示。</p><p><img src="/../images/image-20241123154934271.png" alt="image-20241123154934271"></p><h2 id="四、SpringMvc整合"><a href="#四、SpringMvc整合" class="headerlink" title="四、SpringMvc整合"></a>四、SpringMvc整合</h2><p>前面的已经介绍过，springboot整合了springmvc大部分的注解和配置。下面是某些其他springmvc功能的设置。</p><h3 id="4-1-静态资源访问"><a href="#4-1-静态资源访问" class="headerlink" title="4.1 静态资源访问"></a>4.1 静态资源访问</h3><p>使用Spring Boot做开发时 , 项目中没有webapp目录 , 我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？springboot给我们配置好了默认的静态资源访问路径。只需要把静态资源创建在相应的路径下即可访问。在maven工程中，classpath指的是main&#x2F;java&#x2F;resources。创建文件如下所示</p><p><img src="/../images/image-20241125133910828.png" alt="image-20241125133910828"></p><p>1.默认路径</p><p><strong>默认的静态资源路径为：</strong></p><p><strong>· classpath:&#x2F;META-INF&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;static&#x2F;</strong></p><p><strong>· classpath:&#x2F;public&#x2F;</strong></p><p>2.自定义路径</p><p>指定路径的语法格式为 classpath:&#x2F;xxx。指定多个时，仅需加逗号写同样的格式。不能是classpath:&#x2F;webapps, web。无法访问web下面的静态资源，因为我试过。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/webapps,</span> <span class="string">classpath:/web</span> <span class="comment">#自定义静态资源访问路径</span></span><br><span class="line">      <span class="comment">#注意，配置静态资源地址后,会覆盖默认值</span></span><br></pre></td></tr></table></figure><h3 id="4-2-拦截器设置"><a href="#4-2-拦截器设置" class="headerlink" title="4.2 拦截器设置"></a>4.2 拦截器设置</h3><p>拦截器的设置没什么变化，都是要创建一个实现HandlerInterceptor接口的类</p><p><img src="/../images/image-20241125134408792.png" alt="image-20241125134408792"></p><p>然后，在Main类所在的包下创建一个配置类</p><p>1.添加@Configuration注解，springboot会自动进行配置类扫描</p><p>2.实现WebMvcConfigurer接口</p><p>3.重写addInterceptor方法，添加自定义的拦截器类对象即可</p><p><img src="/../images/image-20241125134624664.png" alt="image-20241125134624664"></p><h2 id="五、Druid连接池配置"><a href="#五、Druid连接池配置" class="headerlink" title="五、Druid连接池配置"></a>五、Druid连接池配置</h2><h3 id="5-1-添加相应的依赖"><a href="#5-1-添加相应的依赖" class="headerlink" title="5.1 添加相应的依赖"></a>5.1 添加相应的依赖</h3><p>druid-spring-boot-3-starter目前1.2.20即以上版本已经兼容springboot3了。1.2.20以下版本需要额外配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-配置application-yaml"><a href="#5-2-配置application-yaml" class="headerlink" title="5.2 配置application.yaml"></a>5.2 配置application.yaml</h3><p>druid连接池配置相应信息的固定格式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># druid连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment"># 使用druid连接池</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="5-3-实现"><a href="#5-3-实现" class="headerlink" title="5.3 实现"></a>5.3 实现</h3><p>1.实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Schedule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Controller类</p><p>因为添加了jdbcTemplate的相应依赖，springboot会自动把JdbcTemplate对象添加到ioc容器里，所以直接用@Autowired获取即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;sche&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate template;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Schedule&gt; <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from schedule&quot;</span>;</span><br><span class="line">        List&lt;Schedule&gt; query = template.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Schedule.class));</span><br><span class="line">        <span class="keyword">return</span> query;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.启动类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.启动并访问</p><p><img src="/../images/image-20241125141114710.png" alt="image-20241125141114710"></p><h2 id="六、Mybatis整合"><a href="#六、Mybatis整合" class="headerlink" title="六、Mybatis整合"></a>六、Mybatis整合</h2><h3 id="6-1Mybatis整合步骤"><a href="#6-1Mybatis整合步骤" class="headerlink" title="6.1Mybatis整合步骤"></a>6.1Mybatis整合步骤</h3><ol><li>导入依赖：在您的Spring Boot项目的构建文件（如pom.xml）中添加MyBatis和数据库驱动的相关依赖。例如，如果使用MySQL数据库，您需要添加MyBatis和MySQL驱动的依赖。</li><li>配置数据源：在<code>application.properties</code>或<code>application.yml</code>中配置数据库连接信息，包括数据库URL、用户名、密码、mybatis的功能配置等。</li><li>创建实体类：创建与数据库表对应的实体类。</li><li>创建Mapper接口：创建与数据库表交互的Mapper接口。</li><li>创建Mapper接口的SQL实现： 可以使用mapperxml文件或者注解方式</li><li>创建程序启动类</li><li>注解扫描：在Spring Boot的主应用类上添加<code>@MapperScan</code>注解，用于扫描和注册Mapper接口的动态代理对象到ioc容器。</li><li>使用Mapper接口：在需要使用数据库操作的地方，通过依赖注入或直接实例化Mapper接口，并调用其中的方法进行数据库操作。</li></ol><p>以下是快速案例</p><h3 id="6-2依赖导入"><a href="#6-2依赖导入" class="headerlink" title="6.2依赖导入"></a>6.2依赖导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid启动器的依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-配置application-yaml文件"><a href="#6-3-配置application-yaml文件" class="headerlink" title="6.3 配置application.yaml文件"></a>6.3 配置application.yaml文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># druid连接池配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mybatis配置， 彻底抛弃mybatis-config.xml文件</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span>  <span class="comment">#指定mapper的xml文件的位置</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.ldy.bean</span>  <span class="comment">#设置实体类别名</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment"># setting设置</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span> <span class="comment">#自动映射，full表示可以嵌套映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment">#开启驼峰式命名法</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.slf4j.Slf4jImpl</span> <span class="comment">#开启日志输出</span></span><br></pre></td></tr></table></figure><h3 id="6-4-类和接口"><a href="#6-4-类和接口" class="headerlink" title="6.4 类和接口"></a>6.4 类和接口</h3><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Schedule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScheduleMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Schedule&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;sche&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ScheduleMapper mapper;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Schedule&gt; <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Schedule&gt; schedules = mapper.selectAll();</span><br><span class="line">        <span class="keyword">return</span> schedules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得在Main中开启<strong>mapper包扫描</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.ldy.mapper&quot;)</span> <span class="comment">//mapper包扫描,会把接口的代理对象放到ioc容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、其他SSM功能实现"><a href="#七、其他SSM功能实现" class="headerlink" title="七、其他SSM功能实现"></a>七、其他SSM功能实现</h2><h3 id="1-aop切面管理"><a href="#1-aop切面管理" class="headerlink" title="1.aop切面管理"></a>1.aop切面管理</h3><p>知识点：切点表达式，在之前文章里有总结。</p><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对比</p><p>ssm要在配置类中开启Aspcetj注解支持:</p><p><img src="/../images/image-20241126005435013.png" alt="image-20241126005435013"></p><p>而springboot不需要。直接创建advice类添加@Aspect注解即可使用。</p><p>创建一个advice包用于存储各种Advice类。别忘了在类上添加@Aspect和@Component注解</p><p><img src="/../images/image-20241126003945240.png" alt="image-20241126003945240"></p><p>也可以单独创建一个切点表达式的包用于存放切点信息。</p><p><img src="/../images/image-20241126004131771.png" alt="image-20241126004131771"></p><h3 id="2-tx事务管理"><a href="#2-tx事务管理" class="headerlink" title="2.tx事务管理"></a>2.tx事务管理</h3><p>依赖导入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：SpringBoot项目会自动配置一个 DataSourceTransactionManager，所以我们只需在方法（或者类）加上 @Transactional 注解，就自动纳入 Spring 的事务管理了。</p><p>具体使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;sche&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ScheduleMapper mapper;</span><br><span class="line">    <span class="comment">//自定义异常</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> mapper.delete(id);</span><br><span class="line">        <span class="comment">//id大于20时制造异常，进行事务回滚</span></span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">20</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中@Transactional的属性propagation的各种参数具体功能可以参考如下博客</p><p><a href="https://blog.csdn.net/happydecai/article/details/80338053">Spring事务的传播：PROPAGATION_REQUIRED_propagation.required-CSDN博客</a></p><h2 id="八、springboot项目打包运行"><a href="#八、springboot项目打包运行" class="headerlink" title="八、springboot项目打包运行"></a>八、springboot项目打包运行</h2><blockquote><p>在Spring Boot项目中添加<code>spring-boot-maven-plugin</code>插件是为了支持将项目打包成可执行的可运行jar包。如果不添加<code>spring-boot-maven-plugin</code>插件配置，使用常规的<code>java -jar</code>命令来运行打包后的Spring Boot项目是无法找到应用程序的入口点，因此导致无法运行。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    SpringBoot应用打包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-执行打包"><a href="#6-2-执行打包" class="headerlink" title="6.2 执行打包"></a>6.2 执行打包</h3><p>在idea点击package进行打包</p><p>可以在编译的target文件中查看jar包</p><p><img src="/../images/image_xY_DhdZdAA.png"></p><h3 id="6-3-命令启动和参数说明"><a href="#6-3-命令启动和参数说明" class="headerlink" title="6.3 命令启动和参数说明"></a>6.3 命令启动和参数说明</h3><p><code>java -jar</code>命令用于在Java环境中执行可执行的JAR文件。下面是关于<code>java -jar</code>命令的说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令格式：java -jar  [选项] [参数] <span class="tag">&lt;<span class="name">jar文件名</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>-D&lt;name&gt;=&lt;value&gt;</code>：设置系统属性，可以通过<code>System.getProperty()</code>方法在应用程序中获取该属性值。例如：<code>java -jar -Dserver.port=8080 myapp.jar</code>。</li><li><code>-X</code>：设置JVM参数，例如内存大小、垃圾回收策略等。常用的选项包括：<ul><li><code>-Xmx&lt;size&gt;</code>：设置JVM的最大堆内存大小，例如 <code>-Xmx512m</code> 表示设置最大堆内存为512MB。</li><li><code>-Xms&lt;size&gt;</code>：设置JVM的初始堆内存大小，例如 <code>-Xms256m</code> 表示设置初始堆内存为256MB。</li></ul></li><li><code>-Dspring.profiles.active=&lt;profile&gt;</code>：指定Spring Boot的激活配置文件，可以通过<code>application-&lt;profile&gt;.properties</code>或<code>application-&lt;profile&gt;.yml</code>文件来加载相应的配置。例如：<code>java -jar -Dspring.profiles.active=dev myapp.jar</code>。</li></ol><p>启动和测试：</p><p><img src="/../images/image_sH3S3fZ9Cy.png"></p><p>注意： -D 参数必须要在jar之前！否者不生效！</p><p>以上，即为springboot的快速入门学习，总的来说确实比ssm省事多了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springmvc总结</title>
      <link href="/2024/11/22/Springmvc%E6%80%BB%E7%BB%93/"/>
      <url>/2024/11/22/Springmvc%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringMVC内容较多，且要结合Spring的内容，所以知识点比较散，总结起来太晕了，所以我复制了尚硅谷的springmvc教案，该教案可以说是相当详细了，我对教案内容的某些晦涩难懂地方进行可理解的表达修改。</p><h2 id="一、SpringMVC简介和体验"><a href="#一、SpringMVC简介和体验" class="headerlink" title="一、SpringMVC简介和体验"></a>一、SpringMVC简介和体验</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>SpringMVC官网<a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a></p><p>Spring Web MVC是基于Servlet API构建的原始Web框架，从一开始就包含在Spring Framework中。正式名称“Spring Web MVC”来自其源模块的名称（ <code>spring-webmvc</code> ），但它通常被称为“Spring MVC”。</p><p>在控制层框架历经Strust、WebWork、Strust2等诸多产品的历代更迭之后，目前业界普遍选择了SpringMVC作为Java EE项目表述层开发的<strong>首选方案</strong>。之所以能做到这一点，是因为SpringMVC具备如下显著优势：</p><ul><li><strong>Spring 家族原生产品</strong>，与IOC容器等基础设施无缝对接</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><p>原生Servlet API开发代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">                                                        <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于SpringMVC开发代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,Sting password)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    log.debug(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">    <span class="comment">//调用业务即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-主要作用"><a href="#1-2-主要作用" class="headerlink" title="1.2 主要作用"></a>1.2 主要作用</h3><p><img src="/../images/image_ubxbkc-DZ5-17322800921573.png"></p><p>SSM框架构建起单体项目的技术栈需求！其中的SpringMVC负责表述层（控制层）实现简化！</p><p>SpringMVC的作用主要覆盖的是表述层，例如：</p><ul><li>请求映射</li><li>数据输入</li><li>视图界面</li><li>请求分发</li><li>表单回显</li><li>会话控制</li><li>过滤拦截</li><li>异步交互</li><li>文件上传</li><li>文件下载</li><li>数据校验</li><li>类型转换(如JSON)</li><li>等等等</li></ul><p><strong>最终总结：</strong></p><ol><li>简化前端参数接收( 形参列表 )</li><li>简化后端数据响应(返回值)</li><li>以及其他……</li></ol><h3 id="1-3-核心组件和调用流程理解"><a href="#1-3-核心组件和调用流程理解" class="headerlink" title="1.3 核心组件和调用流程理解"></a>1.3 核心组件和调用流程理解</h3><p>Spring MVC与许多其他Web框架一样，是围绕前端控制器模式设计的，其中中央 <code>Servlet</code>  <code>DispatcherServlet</code> 做整体请求处理调度！</p><p>除了<code>DispatcherServlet</code>SpringMVC还会提供其他特殊的组件协作完成请求处理和响应呈现。</p><p><strong>SpringMVC处理请求流程：</strong></p><p><img src="/../images/image_tmdw8dA_0q.png"></p><p><strong>SpringMVC涉及组件理解：</strong></p><ol><li>DispatcherServlet :  SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，所有请求都经过它的处理和分发！[ CEO ]</li><li>HandlerMapping :  SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书]</li><li>HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！[经理]</li><li>Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！[打工人]</li><li>ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，后端只返回JSON数据，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！[财务]</li></ol><h3 id="1-4-快速体验"><a href="#1-4-快速体验" class="headerlink" title="1.4 快速体验"></a>1.4 快速体验</h3><ol><li><p>体验场景需求</p><p><img src="/../images/image_JrHCHOxu_n.png"></p></li><li><p>配置分析</p><ol><li>DispatcherServlet，设置处理所有请求！</li><li>HandlerMapping,HandlerAdapter,Handler需要加入到IoC容器，供DS调用！</li><li>Handler自己声明（Controller）需要配置到HandlerMapping中供DS查找！</li></ol></li><li><p>准备项目</p><ol><li><p>创建项目</p><p>springmvc-base-quick</p><p>注意：需要转成maven&#x2F;web程序！！</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet.api</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">servlet.api</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springioc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web相关依赖  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置 DispatcherServlet 时需要使用</span></span><br><span class="line"><span class="comment">         Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.DispatcherServlet’</span></span><br><span class="line"><span class="comment">         is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你使用了旧版本的</span></span><br><span class="line"><span class="comment">         Servlet API，没有更新到 Jakarta EE 规范。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet.api&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Controller声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handlers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler就是controller内部的具体方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(&quot;/springmvc/hello&quot;) 就是用来向handlerMapping中注册的方法注解!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ResponseBody</span> 代表向浏览器直接返回数据!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springmvc/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloController.hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springmvc!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Spring MVC核心组件配置类</p><blockquote><p>声明springmvc涉及组件信息的配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>     </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerMapping <span class="title function_">handlerMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerAdapter <span class="title function_">handlerAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerAdapter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>SpringMVC环境搭建</p><blockquote><p>对于使用基于 Java 的 Spring 配置的应用程序，建议这样做，如以下示例所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC提供的接口,是替代web.xml的方案,更方便实现完全注解方式ssm处理!</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Springmvc框架会自动检查当前类的实现类,会自动加载 getRootConfigClasses / getServletConfigClasses 提供的配置类</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> getServletMappings 返回的地址 设置DispatherServlet对应处理的地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定service / mapper层的配置类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定springmvc的配置类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; SpringMvcConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置dispatcherServlet的处理路径!</span></span><br><span class="line"><span class="comment">   * 一般情况下为 / 代表处理所有请求!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p>注意： tomcat应该是10+版本！方可支持 Jakarta EE API!</p><p><img src="/../images/image_196iViHp_T.png"></p></li></ol><h2 id="二、SpringMVC接收数据"><a href="#二、SpringMVC接收数据" class="headerlink" title="二、SpringMVC接收数据"></a>二、SpringMVC接收数据</h2><h3 id="2-1-访问路径设置"><a href="#2-1-访问路径设置" class="headerlink" title="2.1 访问路径设置"></a>2.1 访问路径设置</h3><p>@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p><ol><li><p><strong>精准路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地址进行精确匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>模糊路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/*  </span></span><br><span class="line"><span class="comment">     *    /* 为单层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *    /product/a/a 不可以</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/** </span></span><br><span class="line"><span class="comment">     *   /** 为任意层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *   /product/a/a 也可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product/*&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductController.show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product show!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">单层匹配和多层匹配：</span><br><span class="line">  /*：只能匹配URL地址中的一层，如果想准确匹配两层，那么就写“/*/*”以此类推。</span><br><span class="line">  /**：可以匹配URL地址中的多层。</span><br><span class="line">其中所谓的一层或多层是指一个URL地址字符串被“/”划分出来的各个层次</span><br><span class="line">这个知识点虽然对于@RequestMapping注解来说实用性不大，但是将来配置拦截器的时候也遵循这个规则。</span><br></pre></td></tr></table></figure></li><li><p><strong>类和方法级别区别</strong></p><p><code>@RequestMapping</code> 注解可以用于类级别和方法级别，它们之间的区别如下：</p><ol><li>设置到类级别：<code>@RequestMapping</code> 注解可以设置在控制器类上，用于映射整个控制器的通用请求路径。这样，如果控制器中的多个方法都需要映射同一请求路径，就不需要在每个方法上都添加映射路径。</li><li>设置到方法级别：<code>@RequestMapping</code> 注解也可以单独设置在控制器方法上，用于更细粒度地映射请求路径和处理方法。当多个方法处理同一个路径的不同操作时，可以使用方法级别的 <code>@RequestMapping</code> 注解进行更精细的映射。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.标记到handler方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.优化标记类+handler方法</span></span><br><span class="line"><span class="comment">//类上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//handler方法上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>附带请求方式限制</strong></p><p>HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了下面这个枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">  GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下：@RequestMapping(“&#x2F;logout”) 任何请求方式都可以访问！</p><p>如果需要特定指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     * method = RequestMethod.POST 可以指定单个或者多个请求方式!</span></span><br><span class="line"><span class="comment">     * 注意:违背请求方式会出现405异常!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125; , method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;,method = &#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：违背请求方式，会出现405异常！！！</p></li><li><p><strong>进阶注解</strong></p><p>还有 <code>@RequestMapping</code> 的 HTTP 方法特定快捷方式变体：</p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET)</span></span><br><span class="line">||</span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/login&quot;)</span></span><br></pre></td></tr></table></figure><p>注意：进阶注解只能添加到handler方法上，无法添加到类上！</p></li><li><p><strong>常见配置问题</strong></p><p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时该找哪个 handler 方法处理。</p><blockquote><p>There is already ‘demo03MappingMethodHandler’ bean method com.atguigu.mvc.handler.Demo03MappingMethodHandler#empGet() <strong>mapped</strong>.</p></blockquote></li></ol><h3 id="2-2-接收参数（重点）"><a href="#2-2-接收参数（重点）" class="headerlink" title="2.2 接收参数（重点）"></a>2.2 接收参数（重点）</h3><h4 id="2-2-1-param-和-json参数比较"><a href="#2-2-1-param-和-json参数比较" class="headerlink" title="2.2.1 param 和 json参数比较"></a>2.2.1 param 和 json参数比较</h4><p>在 HTTP 请求中，我们可以选择不同的参数类型，如 param 类型和 JSON 类型。下面对这两种参数类型进行区别和对比：</p><ol><li><p>参数编码： &#x20;</p><p>param 类型的参数会被编码为 ASCII 码。例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。而 JSON 类型的参数会被编码为 UTF-8。</p></li><li><p>参数顺序： &#x20;</p><p>param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。</p></li><li><p>数据类型： &#x20;</p><p>param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</p></li><li><p>嵌套性： &#x20;</p><p>param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</p></li><li><p>可读性： &#x20;</p><p>param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</p></li></ol><p>总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。</p><h4 id="2-2-2-param参数接收"><a href="#2-2-2-param参数接收" class="headerlink" title="2.2.2 param参数接收"></a>2.2.2 param参数接收</h4><ol><li><p><strong>直接接值</strong></p><p>客户端请求</p><p><img src="/../images/image_3SOeT8tvvW.png"></p><p>handler接收参数</p><p>只要形参数名和类型与传递参数相同，即可自动接收!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端请求: http://localhost:8080/param/value?name=xx&amp;age=18</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以利用形参列表,直接接收前端传递的param参数!</span></span><br><span class="line"><span class="comment">     *    要求: 参数名 = 形参名</span></span><br><span class="line"><span class="comment">     *          类型相同</span></span><br><span class="line"><span class="comment">     * 出现乱码正常，json接收具体解决！！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回前端数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/value&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setupForm</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> name + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@RequestParam注解</strong></p><p>可以使用 <code>@RequestParam</code> 注释将 Servlet 请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。</p><p><code>@RequestParam</code>使用场景：</p><ul><li>指定绑定的请求参数名</li><li>要求请求参数必须传递</li><li>为请求参数提供默认值<br>基本用法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/data?name=xx&amp;stuAge=18</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  使用<span class="doctag">@RequestParam</span>注解标记handler方法的形参</span></span><br><span class="line"><span class="comment"> *  指定形参对应的请求参数<span class="doctag">@RequestParam</span>(请求参数名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;stuAge&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，使用此批注的方法参数是必需的，但您可以通过将 <code>@RequestParam</code> 批注的 <code>required</code> 标志设置为 <code>false</code>！</p><p>如果没有没有设置非必须，也没有传递参数会出现：</p><p><img src="/../images/image_vIkYCRMSZL.png"></p><p>将参数设置非必须，并且设置默认值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;stuAge&quot;,required = false,defaultValue = &quot;18&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>特殊场景接值</strong></p><ol><li><p>一名多值</p><p>多选框，提交的数据的时候一个key对应多个值，我们可以使用集合进行接收！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/mul?hbs=吃&amp;hbs=喝</span></span><br><span class="line"><span class="comment"> *  前提就是参数名一致，如上述网址的两个hbs</span></span><br><span class="line"><span class="comment"> *  一名多值,可以使用集合接收即可!但是需要使用<span class="doctag">@RequestParam</span>注解指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/mul&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">mulForm</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hbs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hbs = &quot;</span> + hbs);</span><br><span class="line">    <span class="keyword">return</span> hbs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体接收</p><p>Spring MVC 是 Spring 框架提供的 Web 框架，它允许开发者使用实体对象来接收 HTTP 请求中的参数。通过这种方式，可以在方法内部直接使用对象的属性来访问请求参数，而不需要每个参数都写一遍。下面是一个使用实体对象接收参数的示例：</p><p>定义一个用于接收参数的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中，使用实体对象接收，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里可以使用 user 对象的属性来接收请求参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，将请求参数name和age映射到实体类属性上！要求属性名必须等于参数名！否则无法映射！</p><p>使用postman传递参数测试：</p><p><img src="/../images/image_5BkbhZjtyX.png"></p></li></ol></li></ol><h4 id="2-2-3-路径-参数接收"><a href="#2-2-3-路径-参数接收" class="headerlink" title="2.2.3 路径 参数接收"></a>2.2.3 路径 参数接收</h4><p>路径传递参数是一种在 URL 路径中传递参数的方式。在 RESTful 的 Web 应用程序中，经常使用路径传递参数来表示资源的唯一标识符或更复杂的表示方式。而 Spring MVC 框架提供了 <code>@PathVariable</code> 注解来处理路径传递参数。</p><p><code>@PathVariable</code> 注解允许将 URL 中的占位符映射到控制器方法中的参数。</p><p>例如，如果我们想将 <code>/user/&#123;id&#125;</code> 路径下的 <code>&#123;id&#125;</code> 映射到控制器方法的一个参数中，则可以使用 <code>@PathVariable</code> 注解来实现。</p><p>下面是一个使用 <code>@PathVariable</code> 注解处理路径传递参数的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态路径设计: /user/&#123;动态部分&#125;/&#123;动态部分&#125;   动态部分使用&#123;&#125;包含即可! &#123;&#125;内部动态标识!</span></span><br><span class="line"><span class="comment"> * 形参列表取值: <span class="doctag">@PathVariable</span> Long id  如果形参名 = &#123;动态标识&#125; 自动赋值!</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@PathVariable</span>(&quot;动态标识&quot;) Long id  如果形参名 != &#123;动态标识&#125; 可以通过指定动态标识赋值!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 访问测试:  /param/user/1/root  -&gt; id = 1  uname = root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                      <span class="meta">@PathVariable(&quot;name&quot;)</span> String uname)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot;, uname = &quot;</span> + uname);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-json参数接收"><a href="#2-2-4-json参数接收" class="headerlink" title="2.2.4 json参数接收"></a>2.2.4 json参数接收</h4><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 <code>@RequestBody</code> 注解来将 JSON 数据转换为 Java 对象。<code>@RequestBody</code> 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。其使用方式和示例代码如下：</p><ol><li><p>前端发送 JSON 数据的示例：（使用postman测试）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个用于接收 JSON 数据的 Java 类，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在控制器中，使用 <code>@RequestBody</code> 注解来接收 JSON 数据，并将其转换为 Java 对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPerson</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里可以使用 person 对象来操作 JSON 数据中包含的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>@RequestBody</code> 注解将请求体中的 JSON 数据映射到 <code>Person</code> 类型的 <code>person</code> 参数上，并将其作为一个对象来传递给 <code>addPerson()</code> 方法进行处理。</p></li><li><p>完善配置</p><p>测试：</p><p><img src="/../images/image_-vKMBKKMSZ.png"></p><p>问题：</p><p>org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</p><p><img src="/../images/image_Kb8Lv29M2o.png"></p><p>原因：</p><ul><li>不支持json数据类型处理</li><li>没有json类型处理的工具（jackson）<br>解决：<br>springmvc handlerAdpater配置json转化器,配置类需要明确：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br></pre></td></tr></table></figure><p> }<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pom.xml 加入jackson依赖</span><br><span class="line">```xml</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.15.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>@EnableWebMvc注解说明</p><p>@EnableWebMvc注解效果等同于在 XML 配置中，可以使用 <code>&lt;mvc:annotation-driven&gt;</code> 元素！我们来解析<code>&lt;mvc:annotation-driven&gt;</code>对应的解析工作！</p><p>让我们来查看下<code>&lt;mvc:annotation-driven&gt;</code>具体的动作！</p><ul><li><p>先查看<code>&lt;mvc:annotation-driven&gt;</code>标签最终对应解析的Java类</p><p><img src="/../images/image_WJXPabVDSl.png"></p></li><li><p>查看解析类中具体的动作即可</p><p>打开源码：org.springframework.web.servlet.config.MvcNamespaceHandler</p><p><img src="/../images/image_37KWhccu6c.png"></p><p>打开源码：org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationDrivenBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerMapping.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_ADAPTER_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerAdapter.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> AnnotationDrivenBeanDefinitionParser.class.getClassLoader();</span><br><span class="line">    javaxValidationPresent = ClassUtils.isPresent(<span class="string">&quot;jakarta.validation.Validator&quot;</span>, classLoader);</span><br><span class="line">    romePresent = ClassUtils.isPresent(<span class="string">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class="line">    jaxb2Present = ClassUtils.isPresent(<span class="string">&quot;jakarta.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class="line">    jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">            ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">    jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">    jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class="line">    jackson2CborPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class="line">    gsonPresent = ClassUtils.isPresent(<span class="string">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><pre><code> @Override @Nullable public BeanDefinition parse(Element element, ParserContext context) &#123;   //handlerMapping加入到ioc容器   readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);   //添加jackson转化器   addRequestBodyAdvice(handlerAdapterDef);   addResponseBodyAdvice(handlerAdapterDef);   //handlerAdapter加入到ioc容器   readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);   return null; &#125; //具体添加jackson转化对象方法 protected void addRequestBodyAdvice(RootBeanDefinition beanDef) &#123;   if (jackson2Present) &#123;     beanDef.getPropertyValues().add(&quot;requestBodyAdvice&quot;,         new RootBeanDefinition(JsonViewRequestBodyAdvice.class));   &#125; &#125; protected void addResponseBodyAdvice(RootBeanDefinition beanDef) &#123;   if (jackson2Present) &#123;     beanDef.getPropertyValues().add(&quot;responseBodyAdvice&quot;,         new RootBeanDefinition(JsonViewResponseBodyAdvice.class));   &#125; &#125;</code></pre>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2.3 接收Cookie数据</span><br><span class="line"></span><br><span class="line">可以使用 `@CookieValue` 注释将 HTTP Cookie 的值绑定到控制器中的方法参数。</span><br><span class="line"></span><br><span class="line">考虑使用以下 cookie 的请求：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>下面的示例演示如何获取 cookie 值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookie)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-接收请求头数据"><a href="#2-4-接收请求头数据" class="headerlink" title="2.4 接收请求头数据"></a>2.4 接收请求头数据</h3><p>可以使用 <code>@RequestHeader</code> 批注将请求标头绑定到控制器中的方法参数。</p><p>请考虑以下带有标头的请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host                    localhost:<span class="number">8080</span></span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span></span><br><span class="line">Accept-Language         fr,en-gb;q=<span class="number">0.7</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-<span class="number">8859</span>-<span class="number">1</span>,utf-<span class="number">8</span>;q=<span class="number">0.7</span>,*;q=<span class="number">0.7</span></span><br><span class="line">Keep-Alive              <span class="number">300</span></span><br></pre></td></tr></table></figure><p>下面的示例获取 <code>Accept-Encoding</code> 和 <code>Keep-Alive</code> 标头的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String encoding, </span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Keep-Alive&quot;)</span> <span class="type">long</span> keepAlive)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-原生Api对象操作"><a href="#2-5-原生Api对象操作" class="headerlink" title="2.5 原生Api对象操作"></a>2.5 原生Api对象操作</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html</a></p><p>下表描述了支持的控制器方法参数</p><table><thead><tr><th>Controller method argument 控制器方法参数</th><th>Description</th></tr></thead><tbody><tr><td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td><td>请求&#x2F;响应对象</td></tr><tr><td><code>jakarta.servlet.http.HttpSession</code></td><td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td></tr><tr><td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td>用于访问由 Servlet API 公开的原始请求正文。</td></tr><tr><td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td>用于访问由 Servlet API 公开的原始响应正文。</td></tr><tr><td><code>@PathVariable</code></td><td>接收路径参数注解</td></tr><tr><td><code>@RequestParam</code></td><td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestHeader</code></td><td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td></tr><tr><td><code>@CookieValue</code></td><td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestBody</code></td><td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td></tr><tr><td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td>共享域对象，并在视图呈现过程中向模板公开。</td></tr><tr><td><code>Errors</code>, <code>BindingResult</code></td><td>验证和数据绑定中的错误信息获取对象！</td></tr></tbody></table><p>获取原生对象示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果想要获取请求或者响应对象,或者会话等,可以直接在形参列表传入,并且不分先后顺序!</span></span><br><span class="line"><span class="comment"> * 注意: 接收原生对象,并不影响参数接收!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">api</span><span class="params">(HttpSession session , HttpServletRequest request,</span></span><br><span class="line"><span class="params">                  HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-共享域对象操作"><a href="#2-6-共享域对象操作" class="headerlink" title="2.6 共享域对象操作"></a>2.6 共享域对象操作</h3><h4 id="2-6-1-属性（共享）域作用回顾"><a href="#2-6-1-属性（共享）域作用回顾" class="headerlink" title="2.6.1 属性（共享）域作用回顾"></a>2.6.1 属性（共享）域作用回顾</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f97dcee32b6069830a598d4c04428f21.png" alt="四大域"></p><p>在 JavaWeb 中，共享域指的是在 Servlet 中存储数据，以便在同一 Web 应用程序的多个组件中进行共享和访问。常见的共享域有四种：<code>ServletContext</code>、<code>HttpSession</code>、<code>HttpServletRequest</code>、<code>PageContext</code>。</p><ol><li><code>ServletContext</code> 共享域：<code>ServletContext</code> 对象可以在整个 Web 应用程序中共享数据，是最大的共享域。一般可以用于保存整个 Web 应用程序的全局配置信息，以及所有用户都共享的数据。在 <code>ServletContext</code> 中保存的数据是线程安全的。总结，<strong>直至服务器关闭前都有效</strong>。</li><li><code>HttpSession</code> 共享域：<code>HttpSession</code> 对象可以在同一用户发出的多个请求之间共享数据，但只能在同一个会话中使用。比如，可以将用户登录状态保存在 <code>HttpSession</code> 中，让用户在多个页面间保持登录状态。总结，<strong>当前浏览器，直至服务器会话过期</strong>。</li><li><code>HttpServletRequest</code> 共享域：<code>HttpServletRequest</code> 对象可以在同一个请求的多个处理器方法之间共享数据。比如，可以将请求的参数和属性存储在 <code>HttpServletRequest</code> 中，让处理器方法之间可以访问这些数据。总结，<strong>一次请求，转发</strong>。</li><li><code>PageContext</code> 共享域：<code>PageContext</code> 对象是在 JSP 页面Servlet 创建时自动创建的。它可以在 JSP 的各个作用域中共享数据，包括<code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code> 等作用域。</li></ol><p>共享域的作用是提供了方便实用的方式在同一 Web 应用程序的多个组件之间传递数据，并且可以将数据保存在不同的共享域中，根据需要进行选择和使用。</p><p><img src="/../images/img010_VQ5ta0PT96.png"></p><h4 id="2-6-2-Request级别属性（共享）域"><a href="#2-6-2-Request级别属性（共享）域" class="headerlink" title="2.6.2 Request级别属性（共享）域"></a>2.6.2 Request级别属性（共享）域</h4><p>在springmvc中使用共享域时，只需要在方法参数上声明共享域对象，方法体上就可以直接使用该共享域对象的方法了。</p><ol><li><p>使用 Model 类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModel</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Model类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Model model)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;requestScopeMessageModel&quot;</span>,<span class="string">&quot;i am very happy[model]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 ModelMap 类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModelMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明ModelMap类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        ModelMap modelMap)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;requestScopeMessageModelMap&quot;</span>,<span class="string">&quot;i am very happy[model map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 Map 类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Map类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    map.put(<span class="string">&quot;requestScopeMessageMap&quot;</span>, <span class="string">&quot;i am very happy[map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用原生 request 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/original&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrOriginalRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 拿到原生对象，就可以调用原生方法执行各种操作</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    request.setAttribute(<span class="string">&quot;requestScopeMessageOriginal&quot;</span>, <span class="string">&quot;i am very happy[original]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 ModelAndView 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testAttrByModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 2.存入模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;requestScopeMessageMAV&quot;</span>, <span class="string">&quot;i am very happy[mav]&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-6-3-Session级别属性（共享）域"><a href="#2-6-3-Session级别属性（共享）域" class="headerlink" title="2.6.3 Session级别属性（共享）域"></a>2.6.3 Session级别属性（共享）域</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/session&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//直接对session对象操作,即对会话范围操作!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-4-Application级别属性（共享）域"><a href="#2-6-4-Application级别属性（共享）域" class="headerlink" title="2.6.4 Application级别属性（共享）域"></a>2.6.4 Application级别属性（共享）域</h4><p>解释：springmvc会在初始化容器的时候，讲servletContext对象存储到ioc容器中！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/attr/application&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">attrApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;appScopeMsg&quot;</span>, <span class="string">&quot;i am hungry...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、SpringMVC响应数据"><a href="#三、SpringMVC响应数据" class="headerlink" title="三、SpringMVC响应数据"></a>三、SpringMVC响应数据</h2><h3 id="3-1-handler方法分析"><a href="#3-1-handler方法分析" class="headerlink" title="3.1 handler方法分析"></a>3.1 handler方法分析</h3><p>理解handler方法的作用和组成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 一个controller的方法是控制层的一个处理器,我们称为handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler需要使用<span class="doctag">@RequestMapping</span>/<span class="doctag">@GetMapping</span>系列,声明路径,在HandlerMapping中注册,供DS查找!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler作用总结:</span></span><br><span class="line"><span class="comment"> *       1.接收请求参数(param,json,pathVariable,共享域等) </span></span><br><span class="line"><span class="comment"> *       2.调用业务逻辑 </span></span><br><span class="line"><span class="comment"> *       3.响应前端数据(页面（不讲解模版页面跳转）,json,转发和重定向等)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler如何处理呢</span></span><br><span class="line"><span class="comment"> *       1.接收参数: handler(形参列表: 主要的作用就是用来接收参数)</span></span><br><span class="line"><span class="comment"> *       2.调用业务: &#123; 方法体  可以向后调用业务方法 service.xx() &#125;</span></span><br><span class="line"><span class="comment"> *       3.响应数据: return 返回结果,可以快速响应前端数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handler</span><span class="params">(简化请求参数接收)</span>&#123;</span><br><span class="line">    调用业务方法</span><br><span class="line">    返回的结果 （页面跳转，返回数据（json））</span><br><span class="line">    <span class="keyword">return</span> 简化响应前端数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 请求数据接收，我们都是通过handler的形参列表</p><p>&#x20;            前端数据响应，我们都是通过handler的return关键字快速处理！</p><p>&#x20;       springmvc简化了参数接收和响应！</p><h3 id="3-2-页面跳转控制"><a href="#3-2-页面跳转控制" class="headerlink" title="3.2 页面跳转控制"></a>3.2 页面跳转控制</h3><h4 id="3-2-1-快速返回模板视图"><a href="#3-2-1-快速返回模板视图" class="headerlink" title="3.2.1 快速返回模板视图"></a>3.2.1 快速返回模板视图</h4><ol><li><p>开发模式回顾</p><p>在 Web 开发中，有两种主要的开发模式：前后端分离和混合开发。</p><p>前后端分离模式：[重点]</p><p>指将前端的界面和后端的业务逻辑通过接口分离开发的一种方式。开发人员使用不同的技术栈和框架，前端开发人员主要负责页面的呈现和用户交互，后端开发人员主要负责业务逻辑和数据存储。前后端通信通过 API 接口完成，数据格式一般使用 JSON 或 XML。前后端分离模式可以提高开发效率，同时也有助于代码重用和维护。</p><p>混合开发模式：</p><p>指将前端和后端的代码集成在同一个项目中，共享相同的技术栈和框架。这种模式在小型项目中比较常见，可以减少学习成本和部署难度。但是，在大型项目中，这种模式会导致代码耦合性很高，维护和升级难度较大。</p><p>对于混合开发，我们就需要使用动态页面技术，动态展示Java的共享域数据！！</p></li><li><p>jsp技术了解</p><p>JSP（JavaServer Pages）是一种动态网页开发技术，它是由 Sun 公司提出的一种基于 Java 技术的 Web 页面制作技术，可以在 HTML 文件中嵌入 Java 代码，使得生成动态内容的编写更加简单。</p><p>JSP 最主要的作用是生成动态页面。它允许将 Java 代码嵌入到 HTML 页面中，以便使用 Java 进行数据库查询、处理表单数据和生成 HTML 等动态内容。另外，JSP 还可以与 Servlet 结合使用，实现更加复杂的 Web 应用程序开发。</p><p>JSP 的主要特点包括：</p><ol><li>简单：JSP 通过将 Java 代码嵌入到 HTML 页面中，使得生成动态内容的编写更加简单。</li><li>高效：JSP 首次运行时会被转换为 Servlet，然后编译为字节码，从而可以启用 Just-in-Time（JIT）编译器，实现更高效的运行。</li><li>多样化：JSP 支持多种标准标签库，包括 JSTL（JavaServer Pages 标准标签库）、EL（表达式语言）等，可以帮助开发人员更加方便的处理常见的 Web 开发需求。<br>总之，JSP 是一种简单高效、多样化的动态网页开发技术，它可以方便地生成动态页面和与 Servlet 结合使用，是 Java Web 开发中常用的技术之一。</li></ol></li><li><p>准备jsp页面和依赖</p><p>pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp页面创建</p><p>建议位置：&#x2F;WEB-INF&#x2F;下，避免外部直接访问！</p><p>位置：&#x2F;WEB-INF&#x2F;views&#x2F;home.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!-- 可以获取共享域的数据,动态展示! jsp== 后台vue --&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>快速响应模版页面</p><ol><li><p>配置jsp视图解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>handler返回视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  跳转到提交文件页面  /save/jump</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  如果要返回jsp页面!</span></span><br><span class="line"><span class="comment"> *     1.方法返回值改成字符串类型</span></span><br><span class="line"><span class="comment"> *     2.返回逻辑视图名即可    </span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span></span><br><span class="line"><span class="comment"> *            + 逻辑视图名 +</span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;jump&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jumpJsp</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;FileController.jumpJsp&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;request data!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="3-2-2-转发和重定向"><a href="#3-2-2-转发和重定向" class="headerlink" title="3.2.2 转发和重定向"></a>3.2.2 转发和重定向</h4><p>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用 <code>redirect</code> 或者 <code>forward</code> 关键字来实现重定向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirectDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 重定向到 /demo 路径 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/forward-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forwardDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 转发到 /demo 路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： 转发和重定向到项目下资源路径都是相同，都不需要添加项目根路径！填写项目下路径即可！</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>将方法的返回值，设置String类型</li><li>转发使用forward关键字，重定向使用redirect关键字</li><li>关键字: &#x2F;路径</li><li>注意：如果是项目下的资源，转发和重定向都一样都是项目下路径！都不需要添加项目根路径！</li></ul><h3 id="3-3-返回JSON数据（重点）"><a href="#3-3-返回JSON数据（重点）" class="headerlink" title="3.3 返回JSON数据（重点）"></a>3.3 返回JSON数据（重点）</h3><h4 id="3-3-1-前置准备"><a href="#3-3-1-前置准备" class="headerlink" title="3.3.1 前置准备"></a>3.3.1 前置准备</h4><p>导入jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加json数据转化器</p><p>@EnableWebMvc&#x20;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> SpringMVC对应组件的配置类 [声明SpringMVC需要的组件信息]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span> 导入handlerMapping和handlerAdapter的三种方式</span></span><br><span class="line"> <span class="comment">//1.自动导入handlerMapping和handlerAdapter [推荐]</span></span><br><span class="line"> <span class="comment">//2.可以不添加,springmvc会检查是否配置handlerMapping和handlerAdapter,没有配置默认加载</span></span><br><span class="line"> <span class="comment">//3.使用@Bean方式配置handlerMapper和handlerAdapter</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-ResponseBody"><a href="#3-3-2-ResponseBody" class="headerlink" title="3.3.2 @ResponseBody"></a>3.3.2 @ResponseBody</h4><ol><li><p>方法上使用@ResponseBody</p><p>可以在方法上使用 <code>@ResponseBody</code>注解，用于将方法返回的对象序列化为 JSON 或 XML 格式的数据，并发送给客户端。在前后端分离的项目中使用！</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/accounts/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，<code>@ResponseBody</code> 注解可以用来标识方法或者方法返回值，表示方法的返回值是要直接返回给客户端的数据，而不是由视图解析器来解析并渲染生成响应体（viewResolver没用）。</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user/detail&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestBody</span> User userParam)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userParam = &quot;</span> + userParam);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    <span class="comment">//返回的对象,会使用jackson的序列化工具,转成json返回给前端!</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><p><img src="/../images/image_GfNTc3Ei41.png"></p></li><li><p>类上使用@ResponseBody</p><p>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//responseBody可以添加到类上,代表默认类中的所有方法都生效!</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-3-RestController"><a href="#3-3-3-RestController" class="headerlink" title="3.3.3 @RestController"></a>3.3.3 @RestController</h4><p>类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解。所以使用了 @RestController 注解就相当于给类中的每个方法都加了 @ResponseBody 注解。</p><p>RestController源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">   * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-返回静态资源处理"><a href="#3-4-返回静态资源处理" class="headerlink" title="3.4 返回静态资源处理"></a>3.4 返回静态资源处理</h3><ol><li><p><strong>静态资源概念</strong></p><p>资源本身已经是可以直接拿到浏览器上使用的程度了，<strong>不需要在服务器端做任何运算、处理</strong>。典型的静态资源包括：</p><ul><li>纯HTML文件</li><li>图片</li><li>CSS文件</li><li>JavaScript文件</li><li>……</li></ul></li><li><p><strong>静态资源访问和问题解决</strong></p><ul><li><p>web应用加入静态资源</p><p><img src="/../images/image_4ZDfBKo7ze.png"></p></li><li><p>手动构建确保编译</p><p><img src="/../images/image_WNWOVOea6e.png"></p><p><img src="/../images/image_jkHB39M3Xa.png"></p><p><img src="/../images/image_iUBYDKRqy5.png"></p></li><li><p>访问静态资源</p><p><img src="/../images/image_k7bhHrwvx1.png"></p></li><li><p>问题分析</p><ul><li>DispatcherServlet 的 url-pattern 配置的是“&#x2F;”</li><li>url-pattern 配置“&#x2F;”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li><li>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</li><li>现在 images&#x2F;mi.jpg 请求没有对应的 @RequestMapping 所以返回 404</li></ul></li><li><p>问题解决</p><p>在 SpringMVC 配置配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.atguigu.controller&quot;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试访问图片：</p><p><img src="/../images/image_mrBsYbjiMM.png"></p></li><li><p>新的问题：其他原本正常的handler请求访问不了了</p><p>handler无法访问</p><p>解决方案：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableWebMvc  //json数据处理,必须使用此注解,因为他会加入json处理器</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="四、RESTFul风格设计和实战"><a href="#四、RESTFul风格设计和实战" class="headerlink" title="四、RESTFul风格设计和实战"></a>四、RESTFul风格设计和实战</h2><h3 id="4-1-RESTFul风格概述"><a href="#4-1-RESTFul风格概述" class="headerlink" title="4.1 RESTFul风格概述"></a>4.1 RESTFul风格概述</h3><h4 id="4-1-1-RESTFul风格简介"><a href="#4-1-1-RESTFul风格简介" class="headerlink" title="4.1.1 RESTFul风格简介"></a>4.1.1 RESTFul风格简介</h4><p><img src="/../images/image_wEi6we5MJQ.png"></p><p>RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。</p><p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p><p>总而言之，RESTful 是一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序！</p><p><img src="/../images/image_X8M-XfzI_A.png"></p><p>学习RESTful设计原则可以帮助我们更好去设计HTTP协议的API接口！！</p><h4 id="4-1-2-RESTFul风格特点"><a href="#4-1-2-RESTFul风格特点" class="headerlink" title="4.1.2 RESTFul风格特点"></a>4.1.2 RESTFul风格特点</h4><ol><li>每一个URI代表1种资源（URI 是名词）；</li><li>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</li><li>资源的表现形式是XML或者<strong>JSON</strong>；</li><li>客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</li></ol><h4 id="4-1-3-RESTFul风格设计规范"><a href="#4-1-3-RESTFul风格设计规范" class="headerlink" title="4.1.3 RESTFul风格设计规范"></a>4.1.3 <strong>RESTFul风格设计规范</strong></h4><ol><li><p><strong>HTTP协议请求方式要求</strong></p><p>REST 风格主张在项目设计、开发过程中，具体的操作符合<strong>HTTP协议定义的请求方式的语义</strong>。</p><table><thead><tr><th>操作</th><th>请求方式</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td></tr><tr><td>保存操作</td><td>POST</td></tr><tr><td>删除操作</td><td>DELETE</td></tr><tr><td>更新操作</td><td>PUT</td></tr></tbody></table></li><li><p><strong>URL路径风格要求</strong></p><p>REST风格下每个资源都应该有一个唯一的标识符，例如一个 URI（统一资源标识符）或者一个 URL（统一资源定位符）。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！</p><p>使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li></ol><ul><li><p>总结</p><p>根据接口的具体动作，选择具体的HTTP协议请求方式</p><p>路径设计从原来携带动标识，改成名词，对应资源的唯一标识即可！</p></li></ul><h4 id="4-1-4-RESTFul风格好处"><a href="#4-1-4-RESTFul风格好处" class="headerlink" title="4.1.4 RESTFul风格好处"></a>4.1.4 RESTFul风格好处</h4><ol><li><p>含蓄，安全</p><p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p></li><li><p>风格统一</p><p>URL 地址整体格式统一，从前到后始终都使用斜杠划分各个单词，用简单一致的格式表达语义。</p></li><li><p>无状态</p><p>在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p></li><li><p>严谨，规范</p><p>严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p></li><li><p>简洁，优雅</p><p>过去做增删改查操作需要设计4个不同的URL，现在一个就够了。</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li><li><p>丰富的语义</p><p>通过 URL 地址就可以知道资源之间的关系。它能够把一句话中的很多单词用斜杠连起来，反过来说就是可以在 URL 地址中用一句话来充分表达语义。</p><blockquote><p><a href="http://localhost:8080/shop" title="http://localhost:8080/shop">http://localhost:8080/shop</a> <a href="http://localhost:8080/shop/product" title="http://localhost:8080/shop/product">http://localhost:8080/shop/product</a> <a href="http://localhost:8080/shop/product/cellPhone" title="http://localhost:8080/shop/product/cellPhone">http://localhost:8080/shop/product/cellPhone</a> <a href="http://localhost:8080/shop/product/cellPhone/iPhone" title="http://localhost:8080/shop/product/cellPhone/iPhone">http://localhost:8080/shop/product/cellPhone/iPhone</a></p></blockquote></li></ol><h3 id="4-2-RESTFul风格实战"><a href="#4-2-RESTFul风格实战" class="headerlink" title="4.2 RESTFul风格实战"></a>4.2 RESTFul风格实战</h3><h4 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h4><ul><li>数据结构： User {id 唯一标识,name 用户名，age 用户年龄}</li><li>功能分析<ul><li>用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）</li><li>保存用户功能</li><li>根据用户id查询用户详情功能</li><li>根据用户id更新用户数据功能</li><li>根据用户id删除用户数据功能</li><li>多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）</li></ul></li></ul><h4 id="4-2-2-RESTFul风格接口设计"><a href="#4-2-2-RESTFul风格接口设计" class="headerlink" title="4.2.2 RESTFul风格接口设计"></a>4.2.2 RESTFul风格接口设计</h4><ol><li><p><strong>接口设计</strong></p><table><thead><tr><th>功能</th><th>接口和请求方式</th><th>请求参数</th><th>返回值</th></tr></thead><tbody><tr><td>分页查询</td><td>GET  &#x2F;user</td><td>page&#x3D;1&amp;size&#x3D;10</td><td>{ 响应数据 }</td></tr><tr><td>用户添加</td><td>POST &#x2F;user</td><td>{ user 数据 }</td><td>{响应数据}</td></tr><tr><td>用户详情</td><td>GET &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>用户更新</td><td>PUT &#x2F;user</td><td>{ user 更新数据}</td><td>{响应数据}</td></tr><tr><td>用户删除</td><td>DELETE &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>条件模糊</td><td>GET &#x2F;user&#x2F;search</td><td>page&#x3D;1&amp;size&#x3D;10&amp;keywork&#x3D;关键字</td><td>{响应数据}</td></tr></tbody></table></li><li><p><strong>问题讨论</strong></p><p>为什么查询用户详情，就使用路径传递参数，多条件模糊查询，就使用请求参数传递？</p><p>误区：restful风格下，不是所有请求参数都是路径传递！可以使用其他方式传递！</p><p>在 RESTful API 的设计中，路径和请求参数和请求体都是用来向服务器传递信息的方式。</p><ul><li>对于查询用户详情，使用路径传递参数是因为这是一个单一资源的查询，即查询一条用户记录。使用路径参数可以明确指定所请求的资源，便于服务器定位并返回对应的资源，也符合 RESTful 风格的要求。</li><li>而对于多条件模糊查询，使用请求参数传递参数是因为这是一个资源集合的查询，即查询多条用户记录。使用请求参数可以通过组合不同参数来限制查询结果，路径参数的组合和排列可能会很多，不如使用请求参数更加灵活和简洁。<br>此外，还有一些通用的原则可以遵循：</li><li>路径参数应该用于指定资源的唯一标识或者 ID，而请求参数应该用于指定查询条件或者操作参数。</li><li>请求参数应该限制在 10 个以内，过多的请求参数可能导致接口难以维护和使用。</li><li>对于敏感信息，最好使用 POST 和请求体来传递参数。</li></ul></li></ol><h4 id="4-2-3-后台接口实现"><a href="#4-2-3-后台接口实现" class="headerlink" title="4.2.3 后台接口实现"></a>4.2.3 后台接口实现</h4><p>准备用户实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>准备用户Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 用户模块的控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size);</span><br><span class="line">        System.out.println(<span class="string">&quot;分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户保存业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户详情业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">detailUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户详情业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户更新业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户更新业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟条件分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;keyword&quot;,required= false)</span>String keyword)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size + <span class="string">&quot;, keyword = &quot;</span> + keyword);</span><br><span class="line">        System.out.println(<span class="string">&quot;条件分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、SpringMVC其他扩展"><a href="#五、SpringMVC其他扩展" class="headerlink" title="五、SpringMVC其他扩展"></a>五、SpringMVC其他扩展</h2><h3 id="5-1-全局异常处理机制"><a href="#5-1-全局异常处理机制" class="headerlink" title="5.1 全局异常处理机制"></a>5.1 全局异常处理机制</h3><h4 id="5-1-1-异常处理两种方式"><a href="#5-1-1-异常处理两种方式" class="headerlink" title="5.1.1 异常处理两种方式"></a>5.1.1 异常处理两种方式</h4><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。异常的出现可能导致程序的运行出现问题，甚至直接导致程序崩溃。因此，在开发过程中，合理处理异常、避免异常产生、以及对异常进行有效的调试是非常重要的。</p><p>对于异常的处理，一般分为两种方式：</p><ul><li>编程式异常处理：是指在代码中显式地编写处理异常的逻辑。它通常涉及到对异常类型的检测及其处理，例如使用 try-catch 块来捕获异常，然后在 catch 块中编写特定的处理代码，或者在 finally 块中执行一些清理操作。在编程式异常处理中，开发人员需要显式地进行异常处理，异常处理代码混杂在业务代码中，导致代码可读性较差。</li><li>声明式异常处理：则是将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。在声明式异常处理中，开发人员只需要为方法或类标注相应的注解（如 <code>@Throws</code> 或 <code>@ExceptionHandler</code>），就可以处理特定类型的异常。相较于编程式异常处理，声明式异常处理可以使代码更加简洁、易于维护和扩展。</li></ul><p>站在宏观角度来看待声明式事务处理：</p><p>整个项目从架构这个层面设计的异常处理的统一机制和规范。</p><p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方案处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。</p><p>使用声明式异常处理，可以统一项目处理异常思路，项目更加清晰明了！</p><h4 id="5-1-2-基于注解异常声明异常处理"><a href="#5-1-2-基于注解异常声明异常处理" class="headerlink" title="5.1.2 基于注解异常声明异常处理"></a>5.1.2 基于注解异常声明异常处理</h4><ol><li><p>声明异常处理控制器类</p><p>异常处理控制类，统一定义异常处理handler方法！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.execptionhandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * description: 全局异常处理器,内部可以定义异常处理Handler!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestControllerAdvice</span> = <span class="doctag">@ControllerAdvice</span> + <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span> 代表当前类的异常处理controller! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明异常处理hander方法</p><p>异常处理handler方法和普通的handler方法参数接收和响应都一致！</p><p>只不过异常处理handler方法要映射异常，发生对应的异常会调用！</p><p>普通的handler方法要使用@RequestMapping注解映射路径，发生对应的路径调用！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理handler </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ExceptionHandler</span>(HttpMessageNotReadableException.class) </span></span><br><span class="line"><span class="comment"> * 该注解标记异常处理Handler,并且指定发生异常调用该方法!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 获取异常对象!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回handler处理结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当发生空指针异常会触发此方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerNullException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有异常都会触发此方法!但是如果有具体的异常处理Handler! </span></span><br><span class="line"><span class="comment"> * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment"> * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment"> *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件扫描控制器类配置</p><p>确保异常处理控制类被扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.controller&quot;,</span></span><br><span class="line"><span class="meta">&quot;com.atguigu.exceptionhandler&quot;&#125;)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-拦截器使用"><a href="#5-2-拦截器使用" class="headerlink" title="5.2 拦截器使用"></a>5.2 拦截器使用</h3><h4 id="5-2-1-拦截器概念"><a href="#5-2-1-拦截器概念" class="headerlink" title="5.2.1 拦截器概念"></a>5.2.1 拦截器概念</h4><p>拦截器和过滤器解决问题</p><ul><li><p>生活中</p><p>为了提高乘车效率，在乘客进入站台前统一检票</p><p><img src="/../images/img008_uQA2iP6_5n.png"></p></li><li><p>程序中</p><p>在程序中，使用拦截器在请求到达具体 handler 方法前，统一执行检测</p><p><img src="/../images/img009_aXz6GsRSMQ.png"></p></li></ul><p>拦截器 Springmvc VS 过滤器 javaWeb：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>选择：</p><p>功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p><p><img src="/../images/image_7rIm3LKXgr.png"></p><h4 id="5-2-2-拦截器使用"><a href="#5-2-2-拦截器使用" class="headerlink" title="5.2.2 拦截器使用"></a>5.2.2 拦截器使用</h4><ol><li><p>创建拦截器类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Process01Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if( ! preHandler())&#123;return;&#125;</span></span><br><span class="line">    <span class="comment">// 在处理请求的目标 handler 方法前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.preHandle&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 返回true：放行</span></span><br><span class="line">        <span class="comment">// 返回false：不放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在目标 handler 方法之后，handler报错不执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, modelAndView = &quot;</span> + modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 渲染视图之后执行(最后),一定执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, ex = &quot;</span> + ex);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器方法拦截位置：</p><p><img src="/../images/image_FwhiGWjP_t.png"></p></li><li><p>修改配置类添加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebMvc</span>  <span class="comment">//json数据处理,必须使用此注解,因为他会加入json处理器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu.controller&quot;,&quot;com.atguigu.exceptionhandler&quot;&#125;)</span> <span class="comment">//<span class="doctag">TODO:</span> 进行controller扫描</span></span><br><span class="line"><span class="comment">//WebMvcConfigurer springMvc进行组件配置的规范,配置组件,提供各种方法! 前期可以实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置jsp对应的视图解析器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//快速配置jsp模板语言对应的</span></span><br><span class="line">        registry.jsp(<span class="string">&quot;/WEB-INF/views/&quot;</span>,<span class="string">&quot;.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启静态资源处理 &lt;mvc:default-servlet-handler/&gt;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123; </span><br><span class="line">        <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 配置详解</span><br><span class="line"></span><br><span class="line">   1. 默认拦截全部</span><br><span class="line"></span><br><span class="line">      ```java</span><br><span class="line">      @Override</span><br><span class="line">      public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">          //将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span><br><span class="line">          registry.addInterceptor(new Process01Interceptor());</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><ol start="2"><li><p>精准配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//也支持 /* 和 /** 模糊路径。 * 任意一层字符串 ** 任意层 任意字符串</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>排除配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加拦截器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将拦截器添加到Springmvc环境,默认拦截所有Springmvc分发的请求</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//精准匹配,设置拦截器处理指定请求 路径可以设置一个或者多个,为项目下路径即可</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>()).addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//排除匹配,排除应该在匹配的范围内排除</span></span><br><span class="line">    <span class="comment">//addPathPatterns(&quot;/common/request/one&quot;) 添加拦截路径</span></span><br><span class="line">    <span class="comment">//excludePathPatterns(&quot;/common/request/tow&quot;); 排除路径,排除应该在拦截的范围内</span></span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Process01Interceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/common/request/one&quot;</span>,<span class="string">&quot;/common/request/tow&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/common/request/tow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>多个拦截器执行顺序</p><ol><li>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li><li>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</li><li>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</li></ol></li></ol><h3 id="5-3-参数校验"><a href="#5-3-参数校验" class="headerlink" title="5.3 参数校验"></a>5.3 参数校验</h3><blockquote><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p></blockquote><ol><li><p><strong>校验概述</strong></p><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr><tr><td>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</td><td></td></tr><tr><td>注解</td><td>规则</td></tr><tr><td>————————————————————————————————————————————————————————————————————————————————————————————————————————————————-</td><td>——————–</td></tr><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr><tr><td>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 @EnableWebMvc 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</td><td></td></tr><tr><td>配置 @EnableWebMvc后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</td><td></td></tr></tbody></table></li><li><p><strong>操作演示</strong></p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>应用校验注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//age   1 &lt;=  age &lt; = 150</span></span><br><span class="line">    <span class="meta">@Min(10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name 3 &lt;= name.length &lt;= 6</span></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>handler标记和绑定错误收集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试效果</p><p><img src="/../images/image_BKORDdDEb9.png"></p></li></ul></li><li><p><strong>易混总结</strong></p><p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p><ol><li><p>@NotNull  (用于检测<strong>包装类型</strong>不为null，如Integer, Float, Double…)</p><p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p></li><li><p>@NotEmpty (集合类型长度大于0)</p><p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 <strong>CharSequence、Collection、Map 或者数组对象类型</strong>的属性进行校验，校验时会检查该属性是否<strong>为 Null 或者 size()&#x3D;&#x3D;0</strong>，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p></li><li><p>@NotBlank （字符串，不为null，切不为”  “字符串）</p><p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于<strong>字符串类型</strong>的属性进行校验，校验时会检查该属性是否<strong>为 Null 或 “” 或者只包含空格</strong>，如果是的话就会校验失败。需要注意的是，**@NotBlank 注解只能用于字符串类型的校验**。<br>总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p></li></ol></li></ol><h2 id="六、SpringMVC总结"><a href="#六、SpringMVC总结" class="headerlink" title="六、SpringMVC总结"></a>六、SpringMVC总结</h2><table><thead><tr><th>核心点</th><th>掌握目标</th></tr></thead><tbody><tr><td>springmvc框架</td><td>主要作用、核心组件、调用流程</td></tr><tr><td>简化参数接收</td><td>路径设计、参数接收、请求头接收、cookie接收</td></tr><tr><td>简化数据响应</td><td>模板页面、转发和重定向、JSON数据、静态资源</td></tr><tr><td>restful风格设计</td><td>主要作用、具体规范、请求方式和请求参数选择</td></tr><tr><td>功能扩展</td><td>全局异常处理、拦截器、参数校验注解</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题易错点整理</title>
      <link href="/2024/11/09/%E7%AE%97%E6%B3%95%E9%A2%98%E6%98%93%E9%94%99%E7%82%B9%E6%95%B4%E7%90%86/"/>
      <url>/2024/11/09/%E7%AE%97%E6%B3%95%E9%A2%98%E6%98%93%E9%94%99%E7%82%B9%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="算法题易错点整理"><a href="#算法题易错点整理" class="headerlink" title="算法题易错点整理"></a>算法题易错点整理</h1><p>这篇博客用于提醒自己在写算法题时，很容易忽视的易错点，有时明明是很小的问题，却花了好长时间才发现。</p><h2 id="1-qsort的cmp函数"><a href="#1-qsort的cmp函数" class="headerlink" title="1.qsort的cmp函数"></a>1.qsort的cmp函数</h2><p>如下图代码，a.d 和b.d都是double类型,如果return语句是a.d-b.d，那么当a.d和b.d的整数位的值相同时，它们并不会排序，导致排序有问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> * x, <span class="type">const</span> <span class="type">void</span> * y)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">map</span> <span class="title">a</span> =</span> *(<span class="keyword">struct</span> <span class="built_in">map</span>*)x;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">map</span> <span class="title">b</span> =</span> *(<span class="keyword">struct</span> <span class="built_in">map</span>*)y;</span><br><span class="line">    <span class="keyword">if</span>(a.d &gt; b.d)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-背包问题"><a href="#2-背包问题" class="headerlink" title="2.背包问题"></a>2.背包问题</h2><h3 id="1）普通的0-1背包问题"><a href="#1）普通的0-1背包问题" class="headerlink" title="1）普通的0-1背包问题"></a>1）普通的0-1背包问题</h3><p>直接根据动态规划来做</p><p>但是，注意，有时会有坑，比如如下代码，问题出在第18行，j应该是&gt;&#x3D;0,而不是&gt;0,原因是vol[i]可能为0.</p><p>因为题目的输入要求为</p><p>第一行包含整数 T ，即个案数。后面是 T 个案例，每个案例有三行，第一行包含两个整数 N ， V ， （N &lt;&#x3D; 1000 ， V &lt;&#x3D; 1000 ） 代表骨头的数量和他的袋子的体积。第二行包含 N 个整数，表示每个骨骼的值。第三行包含 N 个整数，表示每个骨骼的体积。</p><p>这里V没有说大于0，所以0也是可能的。真的吐了，检查了半天，也太恶心了，正常来说肯定大于0啊。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    int t, n, v;</span><br><span class="line">    int val[1111] = &#123;0&#125;, vol[1111] = &#123;0&#125;;</span><br><span class="line">    int dp[1111] = &#123;0&#125;;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while(t-- &gt; 0)&#123;</span><br><span class="line">        memset(val, 0, sizeof(val));</span><br><span class="line">        memset(vol, 0, sizeof(vol));</span><br><span class="line">        memset(dp, 0, sizeof(dp));</span><br><span class="line">        scanf(&quot;%d %d&quot;, &amp;n, &amp;v);</span><br><span class="line">        for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;val[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">            scanf(&quot;%d&quot;, &amp;vol[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">            for(int j = v; j &gt; 0; j--)&#123;</span><br><span class="line">                if(j &gt;= vol[i])</span><br><span class="line">                    dp[j] = max(dp[j], dp[j-vol[i]] + val[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, dp[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）普通的完全背包问题"><a href="#2）普通的完全背包问题" class="headerlink" title="2）普通的完全背包问题"></a>2）普通的完全背包问题</h3><p>即可以取任意个相同的物品，应该对于每一个物品，都把它遍历至容量结束为止，可以参考如下代码。</p><p>题目链接<a href="https://blog.csdn.net/weixin_45808737/article/details/115147213">湫湫系列故事——减肥记I(HDU-4808)-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">111</span>], b[<span class="number">111</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> dp[<span class="number">111111</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = b[i]; j &lt;= m; j ++)&#123;</span><br><span class="line">                    dp[j] = max(dp[j], dp[j-b[i]] + a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[m]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）对于判断是否装满背包的完全背包情况下"><a href="#3）对于判断是否装满背包的完全背包情况下" class="headerlink" title="3）对于判断是否装满背包的完全背包情况下"></a>3）对于判断是否装满背包的完全背包情况下</h3><p>得最大&#x2F;最小的价值情况，要额外进行判段，给每一个物品从头遍历至容量最大值时，先判断该容量是否可以装满，可以则进行赋值，不行则不管它。</p><p>题目链接<a href="https://blog.csdn.net/Alanrookie/article/details/107468511">Piggy-Bank HDU - 1114 （完全背包模板题）_在acm能够做任何事情之前,必须编制预算并获得必要的财政支持。这一行动的主要收入-CSDN博客</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> p[<span class="number">600</span>], w[<span class="number">600</span>];</span><br><span class="line">    <span class="type">int</span> dp[<span class="number">11000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t -- &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;e, &amp;f);</span><br><span class="line">        f = f - e;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= f; i++)&#123;</span><br><span class="line">            dp[i] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;p[i], &amp;w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = w[i]; j &lt;= f; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j - w[i]] != INF)&#123;</span><br><span class="line">                    dp[j] = min(dp[j], dp[j-w[i]] + p[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[f] != INF)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;The minimum amount of money in the piggy-bank is %d.\n&quot;</span>, dp[f]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;This is impossible.\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）对于普通背包问题，不要进行额外判断了，会出错"><a href="#4）对于普通背包问题，不要进行额外判断了，会出错" class="headerlink" title="4）对于普通背包问题，不要进行额外判断了，会出错"></a>4）对于普通背包问题，不要进行额外判断了，会出错</h3><p>和第二点的题目一样，但使用了额外判断时不能通过。</p><p>未通过代码如下，原因是，从后找能完全符合容量的幸福度不一定是最大的，这是因为占满容量的限制。导致越大的容量价值不一定最高。</p><p>例如 价值    容量</p><p>​ 111      100</p><p>​   1         123</p><p>这个情况下，123容量装满只有1元，而100容量装满有111元。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int max(int x, int y)&#123;</span><br><span class="line">    if(x &gt; y)</span><br><span class="line">        return x;</span><br><span class="line">    return y;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    int a[111], b[111];</span><br><span class="line">    while(scanf(&quot;%d&quot;, &amp;n) != EOF)&#123;</span><br><span class="line">        for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">            scanf(&quot;%d %d&quot;, &amp;a[i], &amp;b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        int dp[111111];</span><br><span class="line">        for(int i = 0; i &lt; 111111; i++)&#123;</span><br><span class="line">            dp[i] = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[0] = 0;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;m);</span><br><span class="line">        for(int i = 1; i &lt;= n; i++)&#123;</span><br><span class="line">            for(int j = b[i]; j &lt;= m; j ++)&#123;</span><br><span class="line">                if(dp[j - b[i]] != -1)</span><br><span class="line">                    dp[j] = max(dp[j], dp[j-b[i]] + a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(dp[m] != -1)</span><br><span class="line">            printf(&quot;%d\n&quot;, dp[m]);</span><br><span class="line">        else&#123;</span><br><span class="line">            for(int i = m - 1; i &gt;= 0; i--)&#123;</span><br><span class="line">                if(dp[i] != -1)&#123;</span><br><span class="line">                    printf(&quot;%d&quot;, dp[i]);</span><br><span class="line">                    break;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring技术总结03-Aop</title>
      <link href="/2024/11/08/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9303-Aop/"/>
      <url>/2024/11/08/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9303-Aop/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring技术总结03-Aop"><a href="#Spring技术总结03-Aop" class="headerlink" title="Spring技术总结03-Aop"></a>Spring技术总结03-Aop</h1><h2 id="一、什么是Aop"><a href="#一、什么是Aop" class="headerlink" title="一、什么是Aop"></a>一、什么是Aop</h2><p>AOP：Aspect Oriented Programming面向切面编程。</p><p>AOP利用的是一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>AOP技术包含了切点表达式和增强方法的知识点。</p><h2 id="二、切点表达式和增强方法"><a href="#二、切点表达式和增强方法" class="headerlink" title="二、切点表达式和增强方法"></a>二、切点表达式和增强方法</h2><p>增强方法用于获取调用切面类的类信息，可以根据其信息进行添加独特的功能。</p><h3 id="1-增强方法"><a href="#1-增强方法" class="headerlink" title="1.增强方法"></a>1.增强方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.定义增强方法</span></span><br><span class="line"><span class="comment"> * 2.使用注解指定对应的方法      @After等</span></span><br><span class="line"><span class="comment"> * 3.配置切点表达式中的方法     在增强方法的注解上配置</span></span><br><span class="line"><span class="comment"> * 4.切面和ioc配置        在类前面添加相应的注解@Component @Aspect</span></span><br><span class="line"><span class="comment"> * 5.开启aspectj注解的支持    在配置类或者配置文件中开启</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>实践获取目标类的信息</span></span><br><span class="line"><span class="comment"> *      1.全部增强方法中，获取目标方法的信息(方法名，参数，访问修饰符，所属类的信息)</span></span><br><span class="line"><span class="comment"> *          在增强方法的参数中添加JoinPoint形参，该参数包含了目标类的信息</span></span><br><span class="line"><span class="comment"> *      2.返回的结果</span></span><br><span class="line"><span class="comment"> *          增强方法的参数列表中添加(Object result)</span></span><br><span class="line"><span class="comment"> *          在@AfterReturning(value = &quot;execution()&quot;, returning = &quot;result&quot;)中添加returing=&quot;形参名&quot;接收返回结果</span></span><br><span class="line"><span class="comment"> *      3.异常的信息</span></span><br><span class="line"><span class="comment"> *          增强方法的参数列表中添加(Throwable throwable)</span></span><br><span class="line"><span class="comment"> *          在@AfterThrowing(value = &quot;execution()&quot;, throwing = &quot;throwable&quot;)中添加throwing=&quot;形参名&quot;接收返回结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(15)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAdivce</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">//获取方法参数列表</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法参数列表：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        <span class="comment">//获取方法的名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法名称：&quot;</span>+ name);</span><br><span class="line">        <span class="comment">//获取方法的访问修饰符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> joinPoint.getSignature().getModifiers();</span><br><span class="line">        <span class="type">String</span> <span class="variable">modifer</span> <span class="operator">=</span> Modifier.toString(modifiers);</span><br><span class="line">        System.out.println(<span class="string">&quot;访问修饰符：&quot;</span>+ modifer);</span><br><span class="line">        <span class="comment">//获取方法所属类的信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法所属类：&quot;</span>+className);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* com.ldy.service.impl.*.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object result)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法返回值：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.ldy.service.impl.*.*(..))&quot;,throwing = &quot;throwable&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法异常对象：&quot;</span>+ throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Around(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">//    public void around()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解来创建ioc容器对象</span></span><br><span class="line"><span class="comment">//      要求依赖： spring-text</span></span><br><span class="line"><span class="comment">//@SpringJUnitConfig(value= , location= )</span></span><br><span class="line"><span class="comment">//      value: 指定配置类</span></span><br><span class="line"><span class="comment">//      location: 指定配置文件</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = Config.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用注解自动获取ioc容器中的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//若多个类实现某个接口，代理时可以加@Qualifier指定代理的对象</span></span><br><span class="line">    <span class="comment">//@Qualifier(&quot;demo2&quot;)</span></span><br><span class="line">    <span class="comment">//若不指定，则根据变量名来选对应的代理对象，即demo选Demo,demo2选Demo2</span></span><br><span class="line">    <span class="keyword">public</span> DemoService demo;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Calculate calculate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法参数列表：[1, 2]</span></span><br><span class="line"><span class="comment">        方法名称：div</span></span><br><span class="line"><span class="comment">        访问修饰符：public abstract</span></span><br><span class="line"><span class="comment">        方法所属类：com.ldy.service.impl.Demo</span></span><br><span class="line"><span class="comment">        方法返回值：-1</span></span><br><span class="line"><span class="comment">        div=-1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> demo.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;div=&quot;</span> + div);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法参数列表：[1, 0]</span></span><br><span class="line"><span class="comment">        方法名称：chu</span></span><br><span class="line"><span class="comment">        访问修饰符：public abstract</span></span><br><span class="line"><span class="comment">        方法所属类：com.ldy.service.impl.Demo</span></span><br><span class="line"><span class="comment">        方法异常对象：java.lang.ArithmeticException: / by zero</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//        int chu = demo.chu(1, 0);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;chu=&quot; + chu);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculate.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;add=&quot;</span>+add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-切点表达式"><a href="#2-切点表达式" class="headerlink" title="2.切点表达式"></a>2.切点表达式</h3><p> 切点表达式语法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">TODO:</span>切点表达式</span></span><br><span class="line"><span class="comment">*       固定语法： execution(&quot;1 2 3 4 5 6&quot;)</span></span><br><span class="line"><span class="comment">*           1: 访问修饰符</span></span><br><span class="line"><span class="comment">*               public/private</span></span><br><span class="line"><span class="comment">*           2: 返回参数类型</span></span><br><span class="line"><span class="comment">*               int/void/...</span></span><br><span class="line"><span class="comment">*           细节: * 代表任意修饰符和返回参数类型，但不能独立表示其中一个，即不能 * int</span></span><br><span class="line"><span class="comment">*           3: 包名</span></span><br><span class="line"><span class="comment">*               具体: com.ldy.service.impl</span></span><br><span class="line"><span class="comment">*               单层模糊: com.ldy.service.*  *单层模糊</span></span><br><span class="line"><span class="comment">*               多层模糊: com..impl   ..多层模糊</span></span><br><span class="line"><span class="comment">*               细节: 不能..开头</span></span><br><span class="line"><span class="comment">*               查询所有包下的impl包  *..impl</span></span><br><span class="line"><span class="comment">*               全部包: *..</span></span><br><span class="line"><span class="comment">*           4: 类名</span></span><br><span class="line"><span class="comment">*               具体: DemoService</span></span><br><span class="line"><span class="comment">*               部分模糊: Demo*   表示以Demo开头的所有类</span></span><br><span class="line"><span class="comment">*               模糊: *</span></span><br><span class="line"><span class="comment">*           5: 方法名  与类名一致</span></span><br><span class="line"><span class="comment">*           6: 方法参数</span></span><br><span class="line"><span class="comment">*               具体: (String, int)</span></span><br><span class="line"><span class="comment">*               部分模糊: (String..)  String后面有没有都无所谓</span></span><br><span class="line"><span class="comment">*               模糊: (..)</span></span><br><span class="line"><span class="comment">*       实战:</span></span><br><span class="line"><span class="comment">*           1.全部包下的impl包的所有参数为int的方法</span></span><br><span class="line"><span class="comment">*               * *..impl.*.*(int)</span></span><br><span class="line"><span class="comment">*           2.某包某类下，访问修饰符公有的，返回值类型是int的全部方法，</span></span><br><span class="line"><span class="comment">*               public int xx.xx.jj.*(..)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="comment">*       切点表达式的提取和复用</span></span><br><span class="line"><span class="comment">*           法1.当前类中定义空方法</span></span><br><span class="line"><span class="comment">*               添加注解@Pointcut()里面传要复用的切点表达式 @Pointcut(&quot;execution(* com.ldy..*.*(..))&quot;)</span></span><br><span class="line"><span class="comment">*           法2.创建一个存储切点的类</span></span><br><span class="line"><span class="comment">*               增强方法的注解里写存储切点类的 全类名.方法名()</span></span><br><span class="line"><span class="comment">* */</span></span><br></pre></td></tr></table></figure><h2 id="三、依赖和注解介绍"><a href="#三、依赖和注解介绍" class="headerlink" title="三、依赖和注解介绍"></a>三、依赖和注解介绍</h2><h3 id="aspectj依赖"><a href="#aspectj依赖" class="headerlink" title="aspectj依赖"></a><strong>aspectj依赖</strong></h3><p>在新的子类工程的pom文件里添加aspectj依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a><strong>注解介绍</strong></h3><h4 id="1-Aspect"><a href="#1-Aspect" class="headerlink" title="1.@Aspect"></a>1.<strong>@Aspect</strong></h4><p>作用于类上，声明该类为切面类</p><h4 id="2-Component"><a href="#2-Component" class="headerlink" title="2.@Component"></a>2.<strong>@Component</strong></h4><p>作用于类上，使得该切面类能放到ioc容器</p><h4 id="3-Order"><a href="#3-Order" class="headerlink" title="3.@Order"></a>3.<strong>@Order</strong></h4><p>作用于类上，用于声明切面类的优先级，数字越小级别越优先</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(10)</span></span><br></pre></td></tr></table></figure><h4 id="4-Pointcut"><a href="#4-Pointcut" class="headerlink" title="4.@Pointcut"></a>4.@Pointcut</h4><p>@Pointcut作用于空方法上，为其他方法提供切点表达式。</p><h4 id="4-切面类的方法上的注解"><a href="#4-切面类的方法上的注解" class="headerlink" title="4.切面类的方法上的注解"></a>4.切面类的方法上的注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*       使用注解配置</span><br><span class="line">*           前置  <span class="meta">@Before</span></span><br><span class="line">*           后置  <span class="meta">@AfterReturning</span></span><br><span class="line">*           最后  <span class="meta">@After</span></span><br><span class="line">*           异常  <span class="meta">@AfterThrowing</span></span><br><span class="line">*           环绕  <span class="meta">@Around</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.ldy..*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>这些注解可以指定切点表达式，也可以引用本类或其他类的切点表达式。</p><p>直接指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br></pre></td></tr></table></figure><p>引用本类的切点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.ldy..*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pc</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="comment">//该类中的表达式提取</span></span><br><span class="line"><span class="meta">@Before(&quot;pc()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;事务开启&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用其他类中的切点表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他类中切点表达式提取</span></span><br><span class="line"><span class="meta">@After(&quot;com.ldy.pointcut.MyPointcut.all())</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">public void after()&#123;</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>事务结束<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>被引用的切点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPointcut</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* *..impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">impl</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.ldy..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">all</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-EnableAspectJAutoProxy"><a href="#5-EnableAspectJAutoProxy" class="headerlink" title="5.@EnableAspectJAutoProxy"></a>5.@EnableAspectJAutoProxy</h4><p>作用于配置类上面，用于开启Aspectj注解支持</p><h2 id="四、实操"><a href="#四、实操" class="headerlink" title="四、实操"></a>四、实操</h2><p>简单实操如下</p><h3 id="1-配置类"><a href="#1-配置类" class="headerlink" title="1.配置类"></a>1.配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&#123;&quot;com.ldy.service&quot;, &quot;com.ldy.advice&quot;,&quot;com.ldy.pointcut&quot;&#125;)</span></span><br><span class="line"><span class="comment">//开启支持Aspectj的注解配置</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@EnableAspectAutoProxy用于开启Aspectj的注解支持</p><h3 id="2-切面类"><a href="#2-切面类" class="headerlink" title="2.切面类"></a>2.切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   增强类的内部存储增强代码</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*      1.定义方法存储增强代理</span></span><br><span class="line"><span class="comment">*           具体定义几个根据实际需要</span></span><br><span class="line"><span class="comment">*       2.使用注解配置</span></span><br><span class="line"><span class="comment">*           前置  @Before</span></span><br><span class="line"><span class="comment">*           后置  @AfterReturning</span></span><br><span class="line"><span class="comment">*           最后  @After</span></span><br><span class="line"><span class="comment">*           异常  @AfterThrowing</span></span><br><span class="line"><span class="comment">*           环绕  @Around</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="comment">//@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myaop</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法报错了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.ldy.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Service类"><a href="#3-Service类" class="headerlink" title="3.Service类"></a>3.Service类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ldy.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ldy.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">DemoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">chu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4.测试类"></a>4.测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line">        <span class="type">DemoService</span> <span class="variable">demo</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;demo&quot;</span>, DemoService.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">div</span> <span class="operator">=</span> demo.div(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;div=&quot;</span> + div);</span><br><span class="line"><span class="comment">//        int chu = demo.chu(2, 0);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;chu=&quot; + chu);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo02</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring java ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring技术总结02-IoC</title>
      <link href="/2024/10/31/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9302-IoC/"/>
      <url>/2024/10/31/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9302-IoC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring技术总结02-IoC"><a href="#Spring技术总结02-IoC" class="headerlink" title="Spring技术总结02-IoC"></a>Spring技术总结02-IoC</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p> Ioc：Inverse of Control的简写，为 控制反转，指把创建对象交给Spring进行管理。即不通过new 对象的方式在dao、service等Impl类中获取对象，而是通过读取<strong>xml文件</strong>或者<strong>配置类</strong>的方式创建一个统一管理所有对象的<strong>ApplicationContext类</strong>，通过**getBean()**的方法获取所需对象。</p><p>Spring中的IoC容器就是IoC思想的一个落地产品实现。IoC容器中管理的组件也叫做bean。</p><h2 id="二、基于xml方式管理bean"><a href="#二、基于xml方式管理bean" class="headerlink" title="二、基于xml方式管理bean"></a>二、基于xml方式管理bean</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><p>1.根据上一篇文章，已经按要求重新创建了一个项目。</p><p><img src="/../images/image-20241031163048915.png" alt="image-20241031163048915"></p><p>2.创建实体类和xml配置文件</p><p>配置文件创建方式如下图</p><p><img src="/../images/image-20241031164148051.png" alt="image-20241031164148051"></p><p>实体类创建</p><p><img src="/../images/image-20241031165746906.png" alt="image-20241031165746906"></p><p><img src="/../images/image-20241031165803766.png" alt="image-20241031165803766"></p><p><img src="/../images/image-20241031165824485.png" alt="image-20241031165824485"></p><h3 id="2-管理bean对象——基本操作"><a href="#2-管理bean对象——基本操作" class="headerlink" title="2.管理bean对象——基本操作"></a>2.管理bean对象——基本操作</h3><p>在spring01.xml上编写语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.通过无参构造函数创建实例化的组件，配置方法</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">        id: 组件的标识，自定义名字，方便读取对象</span></span><br><span class="line"><span class="comment">        class: 组件的全限定符，即全类名</span></span><br><span class="line"><span class="comment">`   默认是单例模式，声明两个相同的组件信息，会实例化两个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.bean.User&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.基本属性注入</span></span><br><span class="line"><span class="comment">    在bean标签中添加&lt;property name=&quot;&quot; value/ref=&quot;&quot; &gt;标签</span></span><br><span class="line"><span class="comment">            name:组件set方法去掉set后面一个字母小写的规则命名，例如setName -&gt; name</span></span><br><span class="line"><span class="comment">            value: 直接赋值即可，注意传值类型</span></span><br><span class="line"><span class="comment">            ref: 其他组件的id</span></span><br><span class="line"><span class="comment">    注意：若set方法中的参数是基本类型，用value直接赋值，若是其他类，要用ref取相应的id。</span></span><br><span class="line"><span class="comment">         在组件中一定要给属性注入的属性添加set方法！！！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白小纯&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.对象类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--4.构造器属性注入 </span></span><br><span class="line"><span class="comment">      &lt;constructor-arg 进行DI配置</span></span><br><span class="line"><span class="comment">          value : 直接赋值</span></span><br><span class="line"><span class="comment">          ref : 所要引用对象的bean的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多参数构造器的情况</span></span><br><span class="line"><span class="comment">            三种方式</span></span><br><span class="line"><span class="comment">                1.按构造器的参数默认顺序配置</span></span><br><span class="line"><span class="comment">                2.按构造器的参数的参数名定位赋值</span></span><br><span class="line"><span class="comment">                3. 按构造器的参数的索引值定位赋值，从0开始</span></span><br><span class="line"><span class="comment">以下的实现在上述实体类中并没有设置，从之前的文件复制修改的，了解即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.按构造器的参数默认顺序配置   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.按构造器的参数的参数名定位赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. 按构造器的参数的索引值定位赋值，从0开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们写一个测试类进行测试，看看是否能成功获取对象并执行方法。</p><p>测试时的ioc容器对象创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    创建ioc容器</span></span><br><span class="line"><span class="comment">//    有四个实现类，最常用的是ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推荐创建方式， new 实现类(String...),传入一个或多个ioc配置文件名称</span></span><br><span class="line"><span class="comment">配置文件的名称是根据编译后的target文件中的的classes进行查找的，由于resources下面直接创建了xml文件</span></span><br><span class="line"><span class="comment">，所以相对应的classes下直接有相应的xml文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-03.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取Bean对象</span></span><br><span class="line"><span class="comment">//方法1,只传入bean的id名，需要强转，不推荐</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line"><span class="comment">//方法2，传入bean的id和相应的Class类</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line"><span class="comment">//方法3， 只传入要获取的类的Class</span></span><br><span class="line"><span class="comment">//要求：</span></span><br><span class="line"><span class="comment">//   使用该方法必须在配置文件里，有且只能有该类的一个Bean，不能有多个</span></span><br><span class="line"><span class="comment">//   若多个，则报异常 NoUniqueBeanDefinitionException</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> applicationContext.getBean(Person.class);</span><br><span class="line"><span class="comment">//此外，可以通过该类的父类的Class获取对象</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> applicationContext.getBean(Animal.class);</span><br></pre></td></tr></table></figure><p>推荐在test文件夹下面创建测试类，如下图所示。</p><p><img src="/../images/image-20241031184949948.png" alt="image-20241031184949948"></p><p>这里我们可以看到成功的获取了对象和实现了相应的方法</p><p><img src="/../images/image-20241031185027013.png" alt="image-20241031185027013"></p><h3 id="3-其他细节内容"><a href="#3-其他细节内容" class="headerlink" title="3.其他细节内容"></a>3.其他细节内容</h3><p>以下代码均是之前学习时的产物，没必要重新写了，就复制过来了</p><p>1.bean标签的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    类似tomcat的servlet的生命周期</span></span><br><span class="line"><span class="comment">            init-method: 在该对象创建后就调用指定的对象的一个函数，必须是无参、public且返回值为void</span></span><br><span class="line"><span class="comment">            destory-mothod: 该对象销毁时调用的方法，要求同上</span></span><br><span class="line"><span class="comment">            注意：简而言之就是一旦管理这个bean的类被创建后就会调用init-method,类close()后就会调用destory-method。与通过getBean()获取对象无关，因为bean对象早就创建了，这只是引用创建的对象而已。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    scope属性指定该Bean每次被Ioc容器对象使用getBean()方法获取后是否是单例的</span></span><br><span class="line"><span class="comment">            prototype: 多例</span></span><br><span class="line"><span class="comment">            singleton: 单例， 默认值</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            容器管理范围:</span></span><br><span class="line"><span class="comment">                单例模式下的 Bean 由 Spring 容器管理其整个生命周期，包括创建和销毁。</span></span><br><span class="line"><span class="comment">                多例模式下的 Bean 由客户端代码管理其生命周期，Spring 容器仅负责创建。</span></span><br><span class="line"><span class="comment">            所以多例模式下的Bean在Ioc容器close()后不会被调用destroy-method</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;javaBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.ioc04.JavaBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取原始类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--.直接通过原始类赋值获取DataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.配置文件赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过配置文件赋值给原始类获取DataSource</span></span><br><span class="line"><span class="comment">      &lt;context:property-placeholder 引用配置文件 location=&quot;classpath:druid.properties&quot;指明配置文件在类路径下</span></span><br><span class="line"><span class="comment">      使用$&#123;变量名&#125;来获取配置文件中的属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.配合注解进行包扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定包下面进行注解扫描</span><br><span class="line">        base-package： 包名，该包以下的所有类和子包中的所有类都会被扫描</span><br><span class="line">--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.ldy&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="三、基于配置类的方式管理bean"><a href="#三、基于配置类的方式管理bean" class="headerlink" title="三、基于配置类的方式管理bean"></a>三、基于配置类的方式管理bean</h2><p>Spring从2.5版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化Spring的xml配置。</p><p>Spring通过注解实现自动装配：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义Bean</li><li>依赖注入</li></ol><h3 id="1-注解介绍"><a href="#1-注解介绍" class="headerlink" title="1.注解介绍"></a>1.注解介绍</h3><p>基本的类上注解</p><p><img src="/../images/image-20241031192752509.png" alt="image-20241031192752509"></p><p><strong>@ComponentScan用于批量注册bean。</strong></p><p>这个注解会让spring去扫描某些包及其子包中所有的类，然后将满足一定条件的类作为bean注册到spring容器容器中。</p><p><strong>@Autowired注入</strong><br>        单独使用@Autowired注解，默认根据类型装配（byType）</p><p>@Autowired注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须存在，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在就注入，不存在也不报错。</p><p><strong>@Qualifier搭配@Autowired使用</strong></p><p>若@Autowired注入的类有多个实现类，需要指定某个实体类时，在@Autowired注解下面添加@Qualifier(“指定实现类的id”)来指定注入的实现类。</p><p><strong>@Resource整合了@Autowired和@Qualifier一起的功能</strong></p><ol><li>指定@Resource中的name，则根据名称装配</li><li>未指定name时，则根据属性名装配</li><li>未指定name，属性名也不一致，则根据类型装配</li></ol><p>使用该注解需要导入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@PropertySource配置文件引用</strong></p><p>示例:@PropertySource(value&#x3D;”classpath:jdbc.properties”),与xml的配置文件路径写法一致。</p><h3 id="2-实际操作"><a href="#2-实际操作" class="headerlink" title="2.实际操作"></a>2.实际操作</h3><p><strong>1.简单操作</strong></p><p>创建配置类</p><p><img src="/../images/image-20241031195230545.png" alt="image-20241031195230545"></p><p>给各个组件添加注解，以下是其中一个类</p><p><img src="/../images/image-20241031195322823.png" alt="image-20241031195322823"></p><p>给之前写的类添加上上述注解之后，用AnnotationConfigApplicationContext获取ApplicationContext类进行测试。</p><p><img src="/../images/image-20241031194955240.png" alt="image-20241031194955240"></p><p><strong>2.详细内容</strong></p><p>之前所学习时的配置类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用配置类而不使用xml进行ioc容器的配置</span></span><br><span class="line"><span class="comment">   @Configuration   ioc配置类</span></span><br><span class="line"><span class="comment">   @@ComponentScan   包扫描</span></span><br><span class="line"><span class="comment">   @PropertySource    配置文件引用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ldy&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfigure</span> &#123;</span><br><span class="line">    <span class="comment">//  bean由@Bean注解标注，并且对象类型为方法返回的类型，id默认为方法名</span></span><br><span class="line">    <span class="comment">//  配置文件的Di配置由参数（注解+参数声明）来获取配置参数，以便进行依赖注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;xxx.url&#125;&quot;)</span> String url, <span class="meta">@Value(&quot;$&#123;xxx.driverClassName&#125;&quot;)</span> String driverClassName,<span class="meta">@Value(&quot;$&#123;xxx.username&#125;&quot;)</span> String username, <span class="meta">@Value(&quot;$&#123;xxx.password&#125;&quot;)</span> String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    配置类的Di中，参数作为方法参数被传入</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。用注解配置还是很方便的。</p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring java ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring技术总结01-环境搭建</title>
      <link href="/2024/10/29/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9301-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/10/29/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9301-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring技术总结01-环境搭建"><a href="#Spring技术总结01-环境搭建" class="headerlink" title="Spring技术总结01-环境搭建"></a>Spring技术总结01-环境搭建</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Spring指的是Spring Framework，通常我们称之为Spring框架。Spring框架是一个分层的面向切面的Java应用程序的一站式解决框架，它是Spring技术栈的核心和基础，是为了解决企业级引用开发的复杂性而创建的。</p><p> Spring有两个核心模块：IoC和AOP。</p><p> Ioc：Inverse of Control的简写，为 控制反转，指把创建对象交给Spring进行管理。即不通过new 对象的方式在dao、service等Impl类中获取对象，而是通过xml文件或者配置类的方式统一管理所有对象，将所需对象注入到其他对象。其他</p><p> AOP：Aspect Oriented Programming 的简写，为 面向对象编程。AOP用来封装多个类的公共行为，将那些与业务无关，却为业务模块共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP还解决一些系统层面上的问题，比如日志、事务、权限等。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a><strong>1.创建项目</strong></h3><p>首先，使用Idea中maven这个中间件来创建一个项目。</p><p><img src="/../images/image-20241030183104957-17302943901662.png" alt="image-20241030183104957"></p><h3 id="2-检查Maven设置"><a href="#2-检查Maven设置" class="headerlink" title="2.检查Maven设置"></a><strong>2.检查Maven设置</strong></h3><p>创建完成之后，记得要查看Idea的settings中的Build,Execution,Deployment-&gt;Build Tools-&gt;Maven中的Maven home path,把其改为自己配置的maven文件夹路径，而不是idea默认自带的，然后检查User settings file 和local repository的路径是否正确，不正确要勾选Override进行修改。</p><p><img src="/../images/image-20241030183334305.png" alt="image-20241030183334305"></p><h3 id="3-导入基本依赖以及相关实用插件推荐"><a href="#3-导入基本依赖以及相关实用插件推荐" class="headerlink" title="3.导入基本依赖以及相关实用插件推荐"></a><strong>3.导入基本依赖以及相关实用插件推荐</strong></h3><p><strong>基本依赖项</strong></p><p>1.spring-context依赖。当spring-context依赖引入后，spring的基础依赖已经引入了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.0.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.junit5测试依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.11.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>插件推荐</strong></p><p>1.JBLJavaToWeb插件。方便创建web项目。</p><p><img src="/../images/image-20241030193153121.png" alt="image-20241030193153121"></p><p>在项目根文件夹上右键会出现JBLJavaToWeb选项，点击之后，会自动将项目改为web工程项目。</p><p><img src="/../images/image-20241030193425685.png" alt="image-20241030193425685"></p><p>即在src文件下添加webapps文件夹</p><p><img src="/../images/image-20241030194249420.png" alt="image-20241030194249420"></p><p>并在项目的pom.xml文件里设置packing标签内容为war</p><p><img src="/../images/image-20241030194424280.png" alt="image-20241030194424280"></p><p>2.maven-search插件。该插件可以搜索依赖，选择所需依赖的版本，复制依赖的导入语句，省去了去官网查询依赖的麻烦。</p><p><img src="/../images/image-20241030200033114.png" alt="image-20241030200033114"></p><p>使用方法，在Idea上方导航栏的Tools中的Maven Serach选项。</p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring java ioc aop tx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器项目03</title>
      <link href="/2024/10/11/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE03/"/>
      <url>/2024/10/11/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE03/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器项目03"><a href="#在线音乐播放器项目03" class="headerlink" title="在线音乐播放器项目03"></a>在线音乐播放器项目03</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于网页移植，原本是想把学的音乐播放器移植到原来写的代码中，但经过该音乐播放器的html、css代码学习后，发现自己原来的页面代码写的依托，结构比较混乱，故我决定抛弃原来的页面，转而针对当前音乐播放器的页面进行更改和重新设计。</p><h3 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h3><h4 id="一-页面设计"><a href="#一-页面设计" class="headerlink" title="一.页面设计"></a>一.页面设计</h4><p>1.将原有的界面进行了扩展，增加了播放设置和音量调节功能，并且将其移动至页面下方。</p><p><img src="/../images/image-20241011205539766.png" alt="image-20241011205539766"></p><p>2.增加了侧边导航栏进行功能扩展。</p><p><img src="/../images/image-20241011205618172.png" alt="image-20241011205618172"></p><p>3.搜索功能的展现与音乐列表展开的实现原理一致，将其放在页面左边。同时实现了交互，异步通过后端爬虫获取歌曲数据。</p><p><img src="/../images/image-20241011205741029.png" alt="image-20241011205741029"></p><p><img src="/../images/image-20241011211226658.png" alt="image-20241011211226658"></p><h4 id="二、音乐信息爬取"><a href="#二、音乐信息爬取" class="headerlink" title="二、音乐信息爬取"></a>二、音乐信息爬取</h4><p>原本我想爬取音乐搜索器来进行音乐数据的爬取，以为它已经实现了网易云音乐数据的爬取，但它的内容是动态加载的，需要使用动态爬取的方式，效率低，而且我只能爬到搜索到的第一首歌曲的具体信息，其他的歌曲我看了源码没有找到可以获取的数据，此外，我的爬虫只能爬取英文歌曲和部分中文歌曲，查了很多信息，不知道为什么，一些中文歌曲在爬取时不能成功爬取，明明网址是对的，自己输入可以正常访问，考虑到了编码问题，但还是没发现问题出在哪里。</p><p>所以我打算重新设计爬虫，直接爬取网易云的，但目前爬虫教程都是python爬取网易云，所以我准备学习python的爬取方式再将思想移植到java爬虫里。</p><p>原来的想法代码展示。</p><p><img src="/../images/image-20241011210651630.png" alt="image-20241011210651630"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>在实现音乐信息爬取以及相关交互bug的修复后，对于后面页面的功能扩展和页面新增的进度会变得缓慢，我想还是先学习更多的前后端·知识之后再来进行实现。哎，实现这个项目还是要挺多知识，感觉自己学了挺多，但做起来还是好多东西要学。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器项目02</title>
      <link href="/2024/10/01/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE02/"/>
      <url>/2024/10/01/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE02/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器项目02"><a href="#在线音乐播放器项目02" class="headerlink" title="在线音乐播放器项目02"></a>在线音乐播放器项目02</h1><h3 id="目前进度"><a href="#目前进度" class="headerlink" title="目前进度"></a>目前进度</h3><h5 id="1-初步构建了上方导航栏，以及实现了搜索联想功能-如下图所示。"><a href="#1-初步构建了上方导航栏，以及实现了搜索联想功能-如下图所示。" class="headerlink" title="1.初步构建了上方导航栏，以及实现了搜索联想功能,如下图所示。"></a>1.初步构建了上方导航栏，以及实现了搜索联想功能,如下图所示。</h5><p><img src="/../images/image-20241001003911303.png" alt="image-20241001003911303"></p><p>通过看之前的javaweb项目重新复习一遍了搜索联想功能的实现。</p><h5 id="2-设置了分页查询功能。"><a href="#2-设置了分页查询功能。" class="headerlink" title="2.设置了分页查询功能。"></a>2.设置了分页查询功能。</h5><p>这次的分页查询并没有像之前的web项目一样，通过每次点击相应的图标而发送请求到servlet中进行交互，而是通过vue的帮助，实现了一次获取数据即可实现分页查询功能，很是方便。</p><h5 id="3-重新设计了音乐播放器的显示"><a href="#3-重新设计了音乐播放器的显示" class="headerlink" title="3.重新设计了音乐播放器的显示"></a>3.重新设计了音乐播放器的显示</h5><p>由于html自带的audio标签的样式不是很好看，所以查找了各种信息，最终在B站找到了一个很不错的视频，通过该视频的学习，在另一个网页初步构建了新的音乐播放器，后续会完成该播放器其余内容后将其移植到当前的音乐播放器项目里。如下图所示。</p><p><img src="/../images/image-20241001004512225.png" alt="image-20241001004512225"></p><p>学习视频链接【HTML+CSS3+JS实现音乐播放器项目】<a href="https://www.bilibili.com/video/BV1tj411N7SH?vd_source=ad14811b0629f215912c584fbe9d9875%E8%BF%99%E4%B8%AA%E8%A7%86%E9%A2%91%E5%8F%AF%E4%BB%A5%E8%AF%B4%E6%94%B6%E8%8E%B7%E7%9B%B8%E5%BD%93%E5%A4%9A%EF%BC%8C%E8%AE%A9%E6%88%91%E5%AF%B9%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%9C%89%E4%BA%86%E6%96%B0%E7%9A%84%E8%AE%A4%E8%AF%86%E5%92%8C%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%86%99%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E4%B8%8E%E8%A7%84%E8%8C%83%E3%80%82">https://www.bilibili.com/video/BV1tj411N7SH?vd_source=ad14811b0629f215912c584fbe9d9875这个视频可以说收获相当多，让我对网页布局有了新的认识和更好的写代码逻辑与规范。</a></p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>我先把分页查询功能完善后，晚点再写吧。</p><p>2024&#x2F;10&#x2F;7</p><h5 id="一、自定义音乐播放器交互功能实现流程："><a href="#一、自定义音乐播放器交互功能实现流程：" class="headerlink" title="一、自定义音乐播放器交互功能实现流程："></a>一、自定义音乐播放器交互功能实现流程：</h5><p>1.先通过ajax将音乐数据从数据库中读取出来存入变量musiclist中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载音乐列表信息</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/mvn01/test&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        musiclist = data;</span><br><span class="line">        <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">       <span class="title function_">renderMusicList</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.在点击播放按钮后，除了要播放当前音乐外，还需要将页面背景和音乐信息卡片的内容进行更改，由于该功能具有复用性，所以需要新建加载函数来实现相应的内容更改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据信息，设置页面对应的标签内容</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.name&quot;</span>).<span class="title function_">text</span>(data.<span class="property">name</span>);</span><br><span class="line">    $(<span class="string">&quot;.singer&quot;</span>).<span class="title function_">text</span>(data.<span class="property">singer</span>);</span><br><span class="line">    $(<span class="string">&quot;.time&quot;</span>).<span class="title function_">text</span>(data.<span class="property">time</span>);</span><br><span class="line">    $(<span class="string">&quot;.cover img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, data.<span class="property">cover</span>);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, data.<span class="property">audio_url</span>);</span><br><span class="line">    $(<span class="string">&quot;.mask_bg&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">`url(&quot;<span class="subst">$&#123;data.cover&#125;</span>&quot;) no-repeat center center`</span>,</span><br><span class="line">        <span class="string">&quot;background-size&quot;</span> : <span class="string">&quot;cover&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>给播放按钮添加点击事件时需要考虑当前的播放状态，一开始的想法是判断当前的播放图标来更改音乐的播放与暂停，但在实现音乐的上一首和下一首的功能时，若当前是播放，会出现下一首显示图标暂停，下下一首显示播放，而实际上都是在播放的问题，因为audio在更换音乐源时，图标没有继续更改。所以为了方便，发现了可以用audio的paused属性<code>$(&quot;audio&quot;).get(0).paused</code> 可以告知音乐是否暂停，若暂停，则返回true。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给播放按钮添加点击事件</span></span><br><span class="line">$(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.判断当前播放状态</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="property">paused</span>)&#123;</span><br><span class="line">        <span class="comment">//修改播放状态</span></span><br><span class="line">        isplay = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//0.改变播放图标状态</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/暂停.png&quot;</span>);</span><br><span class="line">        <span class="comment">//1.音乐播放</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">play</span>();</span><br><span class="line">        <span class="comment">//2.动态显示卡片信息</span></span><br><span class="line">        $(<span class="string">&quot;.player-info&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">            <span class="attr">top</span>: <span class="string">&#x27;-100%&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封面旋转起来</span></span><br><span class="line">        $(<span class="string">&quot;.cover&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;animation-play-state&quot;</span>, <span class="string">&quot;running&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//修改播放状态</span></span><br><span class="line">        isplay = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//0.改变播放图标状态</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/播放.png&quot;</span>);</span><br><span class="line">        <span class="comment">//1.音乐暂停播放</span></span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">pause</span>();</span><br><span class="line">        <span class="comment">//2.动态显示卡片信息</span></span><br><span class="line">        $(<span class="string">&quot;.player-info&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                <span class="attr">top</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">                <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封面旋转暂停</span></span><br><span class="line">        $(<span class="string">&quot;.cover&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;animation-play-state&quot;</span>, <span class="string">&quot;paused&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.播放后重新渲染音乐列表</span></span><br><span class="line">    <span class="title function_">renderMusicList</span>(musiclist);</span><br></pre></td></tr></table></figure><p>4.实现上一首和下一首播放时，要注意变量的范围，不能一直加也不能一直减，所以要对音乐索引的临界点进行判定。此外再调用render函数和触发播放按钮的点击事件来进行音乐的播放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给上一首按钮绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#prevBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.当前播放音乐索引减一</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        currentIndex --;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//若是第一首，则跳转至最后一首</span></span><br><span class="line">        currentIndex = musiclist.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用render函数  重新渲染歌曲信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//3.让音乐播放  触发播放按钮事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//给下一首按钮绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#nextBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.当前播放音乐索引加一</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex &lt; musiclist.<span class="property">length</span> - <span class="number">1</span>)&#123;</span><br><span class="line">        currentIndex ++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//若是最后一首，则跳转至第一首</span></span><br><span class="line">        currentIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用render函数  重新渲染歌曲信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//3.让音乐播放  触发播放按钮事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.实现音乐播放列表的显示时，我们需要动态的实时更新音乐列表，所以要创建一个可复用的函数renderMusicList()以便播放状态信息的实时更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据音乐列表创建li</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderMusicList</span>(<span class="params">list</span>)&#123;</span><br><span class="line">    <span class="comment">//先清空列表</span></span><br><span class="line">    $(<span class="string">&quot;.music-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">each</span>(list, <span class="keyword">function</span>(<span class="params">index, item</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> $li = $(<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;<span class="subst">$&#123;currentIndex == index ? <span class="string">&quot;playing&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;index+<span class="number">1</span> &lt; <span class="number">10</span>? <span class="string">&quot;0&quot;</span>+(index +<span class="number">1</span>) : index + <span class="number">1</span>&#125;</span>.<span class="subst">$&#123;item.name&#125;</span>-<span class="subst">$&#123;item.singer&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span data-index=&quot;<span class="subst">$&#123;index&#125;</span>&quot;&gt;&lt;img class=&quot;play-circle&quot; src=&quot;<span class="subst">$&#123;currentIndex == index &amp;&amp; !$(<span class="string">&quot;audio&quot;</span>).get(<span class="number">0</span>).paused ? <span class="string">&#x27;image/icon/暂停.png&#x27;</span>: <span class="string">&#x27;image/icon/播放.png&#x27;</span>&#125;</span>&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        `</span>);</span><br><span class="line">        <span class="comment">//重新加载列表</span></span><br><span class="line">        $(<span class="string">&#x27;.music-list&#x27;</span>).<span class="title function_">append</span>($li);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数所用的地方有 列表图标的点击事件、音乐列表中的播放按钮点击事件、主界面播放按钮的点击事件。主界面播放按钮的点击事件用到的地方多，涵盖了音乐列表信息更新所要关联的地方，方便实现动态更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给音乐列表绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#openModal&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;.modal&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">            <span class="string">&quot;display&quot;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">renderMusicList</span>(musiclist);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//给音乐列表按钮添加点击事件</span></span><br><span class="line">$(<span class="string">&quot;.music-list&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li span&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//修改当前音乐索引</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex == $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-index&#x27;</span>))&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        currentIndex = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-index&quot;</span>);</span><br><span class="line">        <span class="comment">//先设置标签内容</span></span><br><span class="line">        <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再触发播放功能</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.顺序播放、随机播放和单曲循环的实现。该功能应该位于音乐播放结束时实现，所以要监听audio的ended状态，由于在添加移除监听事件需要指定移除的函数，否则无效，所以不能用匿名函数来添加点击事件，所以只能创建相应的函数来进行监听事件的更改。每次点击播放设置图标时，会移除监听audio的上一个事件，再添加当前事件。目前还未实现在随机播放状态下点击下一首时实现随机播放的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给音乐播放设置按钮绑定点击事件</span></span><br><span class="line">$(<span class="string">&quot;#setBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/随机播放.png&quot;</span>);</span><br><span class="line">        <span class="title class_">RadPlay</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>) == <span class="number">2</span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/单曲循环.png&quot;</span>);</span><br><span class="line">        <span class="title class_">CirPlay</span>();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/顺序播放.png&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="title class_">SeqPlay</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//顺序播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SeqPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, cirplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, seqplay)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">seqplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    currentIndex = currentIndex &gt; musiclist.<span class="property">length</span> - <span class="number">1</span> ? <span class="number">0</span> : currentIndex + <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//顺序播放直接出发下一首事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RadPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, seqplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, radplay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//随机获取一个音乐索引</span></span><br><span class="line">    <span class="keyword">var</span> origin = currentIndex;</span><br><span class="line">    <span class="keyword">while</span>(origin == currentIndex)</span><br><span class="line">        currentIndex = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>) % musiclist.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">//重新渲染音乐信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//触发点击事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CirPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, radplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, cirplay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cirplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>我觉得网页最难懂的就是css了，样式太多了，设计页面好麻烦。我对前端内容不是很熟悉，所以在调整css样式方面可以说是相当难受，就是调整不到自己想要的显示效果，因为很多css属性我都是一点不清楚，问ai也是牛头不对马脚。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器搭建项目01</title>
      <link href="/2024/09/26/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE01/"/>
      <url>/2024/09/26/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE01/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器搭建项目01"><a href="#在线音乐播放器搭建项目01" class="headerlink" title="在线音乐播放器搭建项目01"></a>在线音乐播放器搭建项目01</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在学了html,  css, javascript, tomcat，jdbc，jsp等内容之后，闲来无事,又学了maven和vue、mybatis的基础内容，想搭建一个在线音乐播放器的网站，希望是类似于qq音乐和网易云音乐之类的网页音乐播放页面，虽然是不可能的，但还是想着试着自己做一下这个项目来巩固自己所学的内容。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>基于maven项目管理工具，同时遵循JavaEE的MVC设计模式搭建该项目。</p><h4 id="项目文件各部分内容说明："><a href="#项目文件各部分内容说明：" class="headerlink" title="项目文件各部分内容说明："></a>项目文件各部分内容说明：</h4><p><strong>数据库</strong>：先把音乐的相关数据存入到数据库maven当中的music表里，目前包含了四种字段，id, name（其实是文件存放位置）, img（图片存放位置） 和 singer。后期肯定是会添加新的列的，但暂时就放这四个字段。</p><p><strong>java</strong>:基于javaEE的三层架构创建相应文件。</p><p><img src="/../images/image-20240926002554656.png" alt="image-20240926002554656"></p><p><strong>resources</strong>:存放所需配置文件。</p><p><img src="/../images/image-20240926002656127.png" alt="image-20240926002656127"></p><p><strong>webapp</strong>: 存放除了java源码外的其他文件。</p><p><img src="/../images/image-20240926002408273.png" alt="image-20240926002408273"></p><h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>由于对前端代码的不熟悉，在构建页面，调整css属性，写js相关代码上面花了不少时间（设置布局好头疼）。</p><p>在找合适的标签进行绑定点击事件时，我一共试了三个标签 <code>&lt;input&gt; &lt;a&gt; 和 &lt;button&gt;</code>,由于input的value与显示的内容一致，button的按钮外观不好看。所以选择了a标签，将其name属性来存放歌曲存放位置信息，这与其展示的文本不冲突，所以很nice。</p><p>一开始我并没有通过vue来渲染页面，而是直接以静态的代码形式布局网页，所以一开始的这段添加点击事件的代码就行不通了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给超链接添加点击事件，由于a标签是动态渲染的，所以js里面的这个方法不能添加到新渲染的a标签中</span></span><br><span class="line"><span class="comment">// var as = document.getElementsByClassName(&quot;music_a&quot;);</span></span><br><span class="line"><span class="comment">// for(var i = 0; i &lt; as.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//     as[i].onclick = playMusic.bind(null, as[i]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>而是转变成了更为简便的把onclick事件直接添加到一个v-for标签下的a标签中即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;music_a&quot;</span> v-<span class="attr">bind</span>:name=<span class="string">&quot;&#x27;/mvn01/&#x27;+music.name&quot;</span> onclick=<span class="string">&quot;playMusic(this)&quot;</span>&gt;&#123;&#123;music.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如下图所示，目前仅通过vue和axios把数据库的信息传递到网页上面并渲染。目前数据库里面就两个音乐信息，所以看着还行，后面肯定要做分页或者一个可下拉式的列表来应对多个数据的情况。</p><p><img src="/../images/image-20240926003227508.png" alt="image-20240926003227508"></p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><p>美化当前页面，在当前页面上方设计一个横式选择条或者右方设计一个可展开的页面选择条，来选择其他内容的页面。</p><p>给播放器添加字幕功能。</p><p>展示音乐列表的外观实现。</p><p>设置音乐播放界面。类似于<img src="/../images/image-20240926010101221.png" alt="image-20240926010101221"></p><h4 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h4><p>做好各个页面间的数据交互。</p><h4 id="希望做到项目完成的时刻，加油！！！！！"><a href="#希望做到项目完成的时刻，加油！！！！！" class="headerlink" title="希望做到项目完成的时刻，加油！！！！！"></a>希望做到项目完成的时刻，加油！！！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis哨兵模式</title>
      <link href="/2024/07/30/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/07/30/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="哨兵模式概念"><a href="#哨兵模式概念" class="headerlink" title="哨兵模式概念"></a>哨兵模式概念</h1><p>Redis的哨兵模式（Sentinel）是一种高可用的部署方式，由一个或多个Sentinel实例组成的Sentinel系统可以监控和管理多个Redis实例。在哨兵模式下，有一个或多个哨兵进程监控Redis主服务器和备份服务器的状态，并在主服务器下线时自动切换到备份服务器，继续处理命令请求。<br>详解见链接<a href="http://t.csdnimg.cn/FY1Pq">http://t.csdnimg.cn/FY1Pq</a></p><h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><p>首先在主机上配置个一主两从的redis服务器，这里我配置了3个redis配置文件，其中redis-6381.conf是主节点</p><p><img src="/../images/image-20240730085620963.png" alt="image-20240730085620963"></p><p>再配置至少一个sentinel.conf配置文件，里面只需要加入如下语句（可在命令行用 <code>vi &lt;文件地址&gt;</code> 进行直接编写）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor &lt;主节点名称，任意即可&gt;  &lt;主节点ip地址，例127.0.0.1&gt;  &lt;主节点端口号&gt;</span><br></pre></td></tr></table></figure><p>如下所示，conf文件第一行即为加入的语句，语句下面是使用过程中产生的日志</p><p><img src="/../images/image-20240730090039350.png" alt="image-20240730090039350"></p><p>然后在命令行分别启动这三个节点的服务器(例: <code>redis-server myredis/redis-6380.conf</code>) 以及启动哨兵模式 (例: <code>redis-sentinel redis_sentinel/sentinel2.conf</code>)</p><p>最后就可以成功看到命令行中sentinel已经成功监控主节点了</p><p><img src="/../images/image-20240730091105753.png" alt="image-20240730091105753"></p><p>再把端口号为6381的这个主节点服务器关闭(在客户端使用shutdown命令)，可以看到</p><p><img src="/../images/image-20240730091438684.png" alt="image-20240730091438684"></p><p>由最后一句知道，新的主节点转换为了6382，查看6381和6382的从属关系可知已经改变了。</p><p><img src="/../images/image-20240730091615627.png" alt="image-20240730091615627"></p><p>这时，再把原来的主节点6381重新启动，哨兵检测到6381的恢复并主动将其设置为6382的从节点，如下图所示:</p><p><img src="/../images/image-20240730091904396.png" alt="image-20240730091904396"></p><p>至此，哨兵模式的简单实现流程就完成了，更加具体的内容还是查看其他博主的帖子吧。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis主从复制</title>
      <link href="/2024/07/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2024/07/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制概念"><a href="#主从复制概念" class="headerlink" title="主从复制概念"></a>主从复制概念</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower) ; 数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>默认情况下，每台Redis服务器都是主节点 ;且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><h2 id="Redis服务启动方式"><a href="#Redis服务启动方式" class="headerlink" title="Redis服务启动方式"></a>Redis服务启动方式</h2><h4 id="1-默认启动方式"><a href="#1-默认启动方式" class="headerlink" title="1.默认启动方式"></a>1.默认启动方式</h4><blockquote><p> 服务端：.&#x2F;redis-server </p><p>client端：.&#x2F;redis-cli </p><p>退出： .&#x2F;redis-cli shutdown</p></blockquote><h4 id="2-指定端口启动"><a href="#2-指定端口启动" class="headerlink" title="2.指定端口启动"></a>2.指定端口启动</h4><blockquote><p> 服务端：.&#x2F;redis-server –port 端口号 </p><p>client端：.&#x2F;redis-cli -p 端口号 </p><p>退出： .&#x2F;redis-cli -p 端口号 shutdown</p></blockquote><h4 id="3-指定端口ip连接"><a href="#3-指定端口ip连接" class="headerlink" title="3.指定端口ip连接"></a>3.指定端口ip连接</h4><blockquote><p>服务端：.&#x2F;redis-server –port 端口号</p><p>client端：.&#x2F;redis-cli -p 端口号 -h 127.0.0.1</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="1-获取当前redis的信息"><a href="#1-获取当前redis的信息" class="headerlink" title="1.获取当前redis的信息"></a>1.获取当前redis的信息</h4><p>注意默认端口为6379，且该端口默认为主节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server  //开启redis服务端, 默认port 6380 ip 127.0.0.1</span><br><span class="line"></span><br><span class="line">redis-cli  //连接到该redis服务端，默认port 6380 ip 127.0.0.1</span><br><span class="line"></span><br><span class="line">info replication  //查看当前redis的信息，含主从节点信息</span><br></pre></td></tr></table></figure><h4 id="2-获取子节点6380的信息"><a href="#2-获取子节点6380的信息" class="headerlink" title="2.获取子节点6380的信息"></a>2.获取子节点6380的信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server --port 6380  //开启端口为6380的服务端</span><br><span class="line"></span><br><span class="line">redis-cli -p 6380 (-h 127.0.0.1 若ip未改，默认可不写)  //redis的cli(客户端)指定端口与ip连接到指定的服务端</span><br><span class="line"></span><br><span class="line">info replication  //查看当前redis的信息，含主从节点信息</span><br></pre></td></tr></table></figure><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h4 id="1-复制端口号6379的redis配置文件到redis的执行目录"><a href="#1-复制端口号6379的redis配置文件到redis的执行目录" class="headerlink" title="1.复制端口号6379的redis配置文件到redis的执行目录"></a>1.复制端口号6379的redis配置文件到redis的执行目录</h4><p>查询redis的配置文件方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli config get dir</span><br></pre></td></tr></table></figure><p>这个命令返回的是redis的安装目录，配置文件应位于该目录下，注意etc这个位置是其他文件存放位置</p><h4 id="2-复制配置文件到要启动的redis其他端口的目录下-然后执行以下命令"><a href="#2-复制配置文件到要启动的redis其他端口的目录下-然后执行以下命令" class="headerlink" title="2.复制配置文件到要启动的redis其他端口的目录下,然后执行以下命令"></a>2.复制配置文件到要启动的redis其他端口的目录下,然后执行以下命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.config redis-6380.config</span><br></pre></td></tr></table></figure><p>拷贝的配置文件名自己定，如redis-6380.config</p><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><p>下载一个可以打开配置文件的编辑器，推荐subllime</p><p>然后打开配置文件，用ctrl+f查询下面的语句然后进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1. 修改端口号，一主多从模式，此教程中我默认是以6379为主，6380、6381为从</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 2.开启守护进程模式运行，默认是no，这个要搜</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"># 3. 修改pid文件名，我是以端口来区分的</span><br><span class="line"></span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line"></span><br><span class="line"># 4.拷贝多个 redis.conf 配置文件，并按照以上步骤修改配置文件</span><br></pre></td></tr></table></figure><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>因为不了解ubuntu系统，导致我实现主从复制花了2个小时才成功。</p><p>首先一定要先知道redis的服务启动方法，因为这个网上找的有些命令是错误的，导致我开启自定义端口的服务端一直有问题，本文所给命令是我经实践后成功的。</p><p>其次，redis.config这个配置文件我找了半天，才发现在其他文件位置里。同时，要打开配置文件推荐使用sublime。</p><p>最后，不一定要改在配置文件中配置主节点，可以在子节点使用 <code>slaveof 主节点id 主节点端口号</code> 命令来建立主从关系，但如果在配置文件中配置了，那么重启也就不会失效了。</p><h2 id="重大发现"><a href="#重大发现" class="headerlink" title="重大发现"></a>重大发现</h2><p>原来我的操作还是有很大问题，初步了解了linux的命令行操作过后，发现了一个重点，这是针对我电脑的ubuntu系统实现redis主从复制的关键。</p><p>依赖配置文件在服务器端启动redis的方式应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server 配置文件地址(例如：myredis/redis-6380.conf)</span><br></pre></td></tr></table></figure><p>然后，重点来了，执行后，命令行提示我Permission Denied而无法启动redis,然后，我用root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>之后再次输入同样的启动语句，虽然没显示redis启动界面，而且看似好像没有发生任何事一样，你依旧可以输入其他语句。</p><p>结果，当我再次打开终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6380</span><br></pre></td></tr></table></figure><p>发现成功在客户端启动这个redis服务器，随后输入的info replication显示的正是我所配置的redis-6380.conf文件.</p><p>这个成功实现的方法网上找遍了解决方案都没有找到，居然被我误打误撞找到了原因所在。估计是我的这个root权限有点问题，没设置好的缘故。</p><p>然后，就是<strong>服务端：.&#x2F;redis-server –port 端口号</strong> 这个启动redis服务器的方式估计是操作在默认文件夹下的配置文件，那个配置文件并没有被我修改过，所以查看主从关系时发现没有主从节点。</p><p>所以还是要用<code>redis-server 配置文件地址(例如：myredis/redis-6380.conf)</code>这个方式来启动相应文件的redis服务器。</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="9-21日"><a href="#9-21日" class="headerlink" title="9.21日"></a>9.21日</h4><p>之前配置实现主从节点后我发现主从的配置文件都变成了所属者为root，估计是以为配置文件里面的某些设置导致了主从设置后将配置文件的所有者改为了root，此外文件的读写权限也变成了只读。而且使用从节点进行写操作时会失败。</p><p>修改文件所属者和读写权限只要依照下面两条命令执行即可，之后进行操作时，其所属者和读写权限并不会改变，所以还是不知道是什么原因导致我一开始实现主从复制后。权限改变的原因是什么。</p><p>更改文件所属者的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown username 配置文件的路径</span><br></pre></td></tr></table></figure><p>更改文件读写权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+rw 配置文件的路径</span><br></pre></td></tr></table></figure><p>经过发现，redis配置文件里面有个<code>replica-read-only yes</code>的语句，这个语句表明了当前节点若是从节点的话，只能读取数据，不能修改数据，所以要把yes改为no。</p><p>此外，在以普通用户执行<code>redis-server myredis/redis-6380.conf</code>这句命令启动我指定的redis配置文件的服务时，会提示我权限不够，这是因为在配置文件里的语句<code>dir 存放路径</code>没有配置好，导致访问了root权限才能访问的文件夹，这个语句是指定存放rdb文件的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习01</title>
      <link href="/2024/07/07/redis01/"/>
      <url>/2024/07/07/redis01/</url>
      
        <content type="html"><![CDATA[<p><strong>我是通过vm虚拟机安装ubuntu系统来学习redis的。</strong></p><h3 id="一-redis的基本数据结构"><a href="#一-redis的基本数据结构" class="headerlink" title="一.redis的基本数据结构"></a>一.redis的基本数据结构</h3><p>redis有5种基础数据结构，分别是String、Hash、List、Set、SortedSet。除此之外还有HyperLogLog、Geo、Pub&#x2F;Sub, 算是高级的数据结构。</p><h4 id="01-String"><a href="#01-String" class="headerlink" title="01.String"></a>01.String</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; set name cmower</span><br><span class="line">OK</span><br><span class="line">&gt; get name</span><br><span class="line">&quot;cmower&quot;</span><br><span class="line">&gt; exists name</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; del name</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>1）set 命令用来存储一个键值对，在本例中，name 为 key，cmower 为 值。</p><p>2）get 命令用来获取一个键的值。</p><p>3）exists 命令用来测试一个键值对是否存在，<code>(integer) 1</code> 表示存在，<code>(integer) 0</code> 表示不存在。</p><p>4）del 命令用来删除一个键值对，<code>(integer) 1</code> 表示执行成功，<code>(integer) 0</code> 表示执行失败。</p><p>5）当键值对删除后，再通过 get 命令获取时，结果就为 <code>(nil)</code> 。</p><p>6）keys 命令用来查找键。例：*b表示所有以b结尾的键、 cmower 若存在则返回cmower</p><h4 id="02-List"><a href="#02-List" class="headerlink" title="02.List"></a>02.List</h4><p>Redis 列表由多个节点组成，每个节点包含一个字符串元素。列表可以存储任意数量的元素，而且列表中的元素可以重复。由于列表是双向链表，因此可以从列表的头部或尾部进行操作，这为实现先进先出（FIFO）或后进先出（LIFO）队列提供了基础。</p><p>常用命令<br><code>LPUSH key element [element …]</code></p><ul><li><p>描述：将一个或多个值插入到列表的头部。</p></li><li><p>示例：LPUSH list1 value1 value2</p></li></ul><p><code>RPUSH key element [element …]</code></p><ul><li><p>描述：将一个或多个值插入到列表的尾部。</p></li><li><p>示例：RPUSH list1 value1 value2</p></li></ul><p><code>LPOP key</code></p><ul><li><p>描述：移除并返回列表的第一个元素。</p></li><li><p>示例：LPOP list1</p></li></ul><p><code>RPOP key</code></p><ul><li><p>描述：移除并返回列表的最后一个元素。</p></li><li><p>示例：RPOP list1</p></li></ul><p><code>LRANGE key start stop</code></p><ul><li><p>描述：返回列表中指定范围的元素。</p></li><li><p>示例：LRANGE list1 0 5，返回列表的前六个元素。</p></li></ul><p><code>LLEN key</code></p><ul><li><p>描述：返回列表的长度。</p></li><li><p>示例：LLEN list1</p></li></ul><p><code>LINDEX key index</code></p><ul><li><p>描述：返回列表中指定位置的元素。</p></li><li><p>示例：LINDEX list1 2</p></li></ul><p><code>LREM key count value</code></p><ul><li><p>描述：移除列表中等于 value 的元素。</p></li><li><p>示例：LREM list1 2 value1，从列表头部开始移除前两个等于 value1 的元素。</p></li></ul><p><code>LTRIM key start stop</code></p><ul><li><p>描述：对一个列表进行修剪(trim)，使其只保留指定区间内的元素。</p></li><li><p>示例：LTRIM list1 0 10</p></li></ul><h4 id="03-Set"><a href="#03-Set" class="headerlink" title="03.Set"></a>03.Set</h4><p>Redis 的 Set 集合数据 , 与 List 列表功能相似 , 唯一的区别是 Set 集合中的元素 是 <strong>不允许重复</strong>的 ;</p><p>该 Set 集合 是一个 无序集合 , 存储 String 类型数据 ;</p><p>Set 集合底层是由 Hash 表实现 的 , 本质是 字典结构 , 其 添加 , 删除 , 查找 元素的 时间复杂度 是 O(1) ;</p><p>Java 的 HashSet 集合 内部由 HashMap 实现 , 所有的 值 Value 都指向同一个实例对象 ;</p><p>Redis 的 Set 集合 内部也是由 Hash 实现 , 所有的 值 Value 都指向同一个值 ;</p><p>常用命令</p><p>添加和删除与list差不多一致 SADD, SREM</p><p><code>SMEMBERS key</code></p><ul><li>描述：获取key集合的所有元素</li><li>示例：SMEMBERS name</li></ul><p><code>SISMEMBER key value</code></p><ul><li>描述：判断key键中是否存在value值</li><li>示例：SISMEMBER name Alice. 存在返回1，不存在返回0</li></ul><p><code>SCARD key</code></p><ul><li><p>描述：获取集合元素的个数</p></li><li><p>示例：SCARD name. 返回name中元素的个数</p></li></ul><p><code>SINTER key1 key2</code></p><ul><li><p>描述：获取两个集合的交集</p></li><li><p>示例：SINTER course1 course2</p></li></ul><p><code>SUNION key1 key2</code></p><ul><li><p>描述：获取两个集合的并集</p></li><li><p>示例：SUNION course1 course2</p></li></ul><p><code>SDIFF key1 key2</code></p><ul><li><p>描述：获取两个结合的差集</p></li><li><p>示例：SDIFF course1 course2</p></li></ul><p><code>SMOVE key1 key2 value</code></p><ul><li><p>描述：将key集合中的value值移动到key2集合中，key1中的value消失，key2中出现key1中消失的value</p></li><li><p>示例：SMOVE course1 course2 math. 若course1中不含math，则返回0；若含，则返回1</p></li></ul><h4 id="04-Hash"><a href="#04-Hash" class="headerlink" title="04.Hash"></a>04.Hash</h4><p>哈希类型是指Redis键值对中的<strong>值本身又是一个键值对结构</strong>，形如value&#x3D;[{field1，value1}，…{fieldN，valueN}]，</p><p>Hash主要就是对一个对象的多重属性(如人的姓名，性别，年龄)的存储</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d17466ab22014931a1565c8046259903.png?x-oss-process=image/resize,w_1400/format,webp" alt="image.png"></p><p>同样是存储字符串，Hash 与String 的主要区别？</p><ol><li>把所有相关的值聚集到一个key 中，节省内存空间</li><li>只使用一个key，减少key 冲突</li><li>当需要批量获取值的时候，只需要使用一个命令，减少内存&#x2F;IO&#x2F;CPU 的消耗</li></ol><p><strong>常用命令</strong></p><p><code>HSET key field value</code></p><ul><li>描述：将哈希表key中的域field的值设置为value</li><li>示例：HSET person name ldy</li></ul><p><code>HGET key field</code></p><ul><li>描述：获取哈希表key中的域field的值</li><li>示例：HGET person name</li></ul><p><code>MHSET key field1 value1 field2 value2 ......</code></p><ul><li>描述：同时将多个field-value(字段-值)对设置到哈希表key中</li><li>示例：MHSET person name ldy age 15 sex male</li></ul><p><code>MHGET key field1 field2 ......</code></p><ul><li>描述：同时获取多个哈希表key中字段的值</li><li>示例：MHGET person name age sex</li></ul><p><code>HGETALL key</code></p><ul><li>描述：获取哈希表key中所有字段和值</li><li>示例：HGETALL person</li></ul><p><code>HDEL key field1 [field2、field3、... ]</code></p><ul><li>描述：删除哈希表key中的一个或多个指定字段，不存在的字段将被忽略,返回值为删除的字段个数</li><li>示例：HDEL person name age</li></ul><p><code>HLEN key</code></p><ul><li>描述：获取哈希表中字段的数量，当key不存在时返回0</li><li>示例：HLEN person</li></ul><p><code>HEXISTS key field</code></p><ul><li>描述：查看哈希表是否含有指定字段，有返回1，无返回或者key不存在返回0</li><li>示例：HEXISTS person age</li></ul><p><code>HKEYS key</code></p><ul><li>描述：获取哈希表中所有的字段</li><li>示例：HKEYS person</li></ul><p><code>HVALUES key</code></p><ul><li>描述：获取哈希表中所有字段的属性</li><li>示例：HVALUES person</li></ul><p><code>HINCRBY key field 数值</code></p><ul><li>描述：为哈希表中的字段值加上指定的增量</li><li>示例：HINCRBY person age 10</li><li>注意：增量也可以为负数，相当于对指定字段进行减法操作。如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。</li></ul><p><code>HSETNX key field1 value1</code></p><ul><li>描述：为哈希表中不存在的字段赋值</li><li>示例： HSETNX person name ldh age 33</li><li>注意：如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。如果字段已经存在于哈希表中，操作无效。如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0</li></ul><h4 id="05-SortedSet"><a href="#05-SortedSet" class="headerlink" title="05.SortedSet"></a>05.SortedSet</h4><p>Sorted Sets 与 Sets 类似，是一种集合类型，集合中<strong>不会出现重复的数据（member）</strong>。区别在于 Sorted Sets 元素由两部分组成，分别是 member 和 score。</p><p>member 会关联一个 double 类型的分数（score），sorted sets 默认会根据这个 score 对 member 进行从小到大的排序，如果 member 关联的分数 score 相同，则按照字符串的字典顺序排序。</p><p><img src="D:\MyBlog\img\redis\60daf3de60c4d07fa4eaecac6002acb7.png" alt="60daf3de60c4d07fa4eaecac6002acb7"></p><p>常用命令</p><p><code>ZADD key score1 member1 [socre2 member2、... ...]</code></p><p><code>ZCARD key</code></p><p><code>ZRANGE key start stop [WITHSCORES]</code></p><p><code>ZREVRANGE key start stop [WITHSCORES]</code></p><p><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></p><p><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code></p><p><code>ZCOUNT key min max</code></p><p><code>ZINCRBY key increment member</code></p><p><code>ZRANK key member</code></p><p><code>ZREVRANK key member</code></p><p><code>ZREM key member [member ...]</code></p><p><code>ZREMRANGEBYRANK key start stop</code></p><p><code>ZREMRANGEBYSCORE key min max</code></p><p><code>ZSCORE key member</code></p><p>详见网址<a href="https://blog.csdn.net/aitangyong/article/details/51967362">redis数据类型SortedSet的常用命令-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式</title>
      <link href="/2024/05/24/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/05/24/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="  EL表达式"></a><center>  <strong>EL表达式</strong><center></h1><blockquote><h3 id="1-EL表达式概述"><a href="#1-EL表达式概述" class="headerlink" title="1. EL表达式概述"></a><strong>1. EL表达式概述</strong></h3></blockquote><ul><li>EL（Express Language）表达式可以嵌入在JSP页面内部，减少JSP脚本的编写，EL出现的目的是要替代JSP页面中脚本的编写。通俗讲就是通过使用EL表达式来减少java代码的编写。</li></ul><blockquote><h3 id="2-EL从域中取出数据"><a href="#2-EL从域中取出数据" class="headerlink" title="2. EL从域中取出数据"></a><strong>2. EL从域中取出数据</strong></h3></blockquote><ul><li><p>JSP脚本：&lt;%&#x3D;request.getAttribute(name)%&gt;</p></li><li><p>EL表达式替代上面的脚本：${requestScope.name}</p></li><li><p>EL最主要的作用是获得四大域中的数据，格式为<u>${EL表达式}</u></p></li><li><p>EL获得pageContext域中的值：$(pageScope.key);</p></li><li><p>EL获得request域中的值：$(requestScope.key);</p></li><li><p>EL获得session域中的值：$(sessionScope.key);</p></li><li><p>EL获得application域中的值：$(applicationScope.key);</p></li><li><p>EL从四个域中获得某个值:  <u><strong>$(key</strong>)</u></p></li></ul><p> <u><strong>$(key</strong>)</u>该方法和pageContext.findAttribute()一样,同样是依次从pageContext域，request域，session域，application域中 获取属性，在某个域中获取后将不再向后寻找。</p><p><strong>示例：</strong></p><ul><li><p>EL获得普通字符串</p><p><code>$&#123;str&#125;</code></p></li><li><p>EL获得User对象的值</p></li><li><p>EL获得List<String>的值</p></li><li><p>EL获得List<User>的值</p></li><li><p>EL获得Map&lt;String,String&gt;的值</p></li><li><p>EL获得Map&lt;String,User&gt;的值</p></li><li><p>EL获得Map&lt;String, List<User>&gt;的值</p></li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一篇博客</title>
      <link href="/2024/05/23/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/05/23/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是我的第一篇博客，什么也没有诶w(ﾟДﾟ)w！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/22/hello-world/"/>
      <url>/2024/05/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
