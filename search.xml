<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring技术总结02-IoC</title>
      <link href="/2024/10/31/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9302-IoC/"/>
      <url>/2024/10/31/Spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9302-IoC/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring技术总结02-IoC"><a href="#Spring技术总结02-IoC" class="headerlink" title="Spring技术总结02-IoC"></a>Spring技术总结02-IoC</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p> Ioc：Inverse of Control的简写，为 控制反转，指把创建对象交给Spring进行管理。即不通过new 对象的方式在dao、service等Impl类中获取对象，而是通过读取<strong>xml文件</strong>或者<strong>配置类</strong>的方式创建一个统一管理所有对象的<strong>ApplicationContext类</strong>，通过**getBean()**的方法获取所需对象。</p><p>Spring中的IoC容器就是IoC思想的一个落地产品实现。IoC容器中管理的组件也叫做bean。</p><h2 id="二、基于xml方式管理bean"><a href="#二、基于xml方式管理bean" class="headerlink" title="二、基于xml方式管理bean"></a>二、基于xml方式管理bean</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><p>1.根据上一篇文章，已经按要求重新创建了一个项目。</p><p><img src="/../images/image-20241031163048915.png" alt="image-20241031163048915"></p><p>2.创建实体类和xml配置文件</p><p>配置文件创建方式如下图</p><p><img src="/../images/image-20241031164148051.png" alt="image-20241031164148051"></p><p>实体类创建</p><p><img src="/../images/image-20241031165746906.png" alt="image-20241031165746906"></p><p><img src="/../images/image-20241031165803766.png" alt="image-20241031165803766"></p><p><img src="/../images/image-20241031165824485.png" alt="image-20241031165824485"></p><h3 id="2-管理bean对象——基本操作"><a href="#2-管理bean对象——基本操作" class="headerlink" title="2.管理bean对象——基本操作"></a>2.管理bean对象——基本操作</h3><p>在spring01.xml上编写语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.通过无参构造函数创建实例化的组件，配置方法</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">        id: 组件的标识，自定义名字，方便读取对象</span></span><br><span class="line"><span class="comment">        class: 组件的全限定符，即全类名</span></span><br><span class="line"><span class="comment">`   默认是单例模式，声明两个相同的组件信息，会实例化两个组件对象</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.bean.User&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.基本属性注入</span></span><br><span class="line"><span class="comment">    在bean标签中添加&lt;property name=&quot;&quot; value/ref=&quot;&quot; &gt;标签</span></span><br><span class="line"><span class="comment">            name:组件set方法去掉set后面一个字母小写的规则命名，例如setName -&gt; name</span></span><br><span class="line"><span class="comment">            value: 直接赋值即可，注意传值类型</span></span><br><span class="line"><span class="comment">            ref: 其他组件的id</span></span><br><span class="line"><span class="comment">    注意：若set方法中的参数是基本类型，用value直接赋值，若是其他类，要用ref取相应的id。</span></span><br><span class="line"><span class="comment">         在组件中一定要给属性注入的属性添加set方法！！！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.bean.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;白小纯&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3.对象类型属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;user2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--4.构造器属性注入 </span></span><br><span class="line"><span class="comment">      &lt;constructor-arg 进行DI配置</span></span><br><span class="line"><span class="comment">          value : 直接赋值</span></span><br><span class="line"><span class="comment">          ref : 所要引用对象的bean的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多参数构造器的情况</span></span><br><span class="line"><span class="comment">            三种方式</span></span><br><span class="line"><span class="comment">                1.按构造器的参数默认顺序配置</span></span><br><span class="line"><span class="comment">                2.按构造器的参数的参数名定位赋值</span></span><br><span class="line"><span class="comment">                3. 按构造器的参数的索引值定位赋值，从0开始</span></span><br><span class="line"><span class="comment">以下的实现在上述实体类中并没有设置，从之前的文件复制修改的，了解即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.按构造器的参数默认顺序配置   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.按构造器的参数的参数名定位赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3. 按构造器的参数的索引值定位赋值，从0开始--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ggbone&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们写一个测试类进行测试，看看是否能成功获取对象并执行方法。</p><p>测试时的ioc容器对象创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    创建ioc容器</span></span><br><span class="line"><span class="comment">//    有四个实现类，最常用的是ClassPathXmlApplicationContext</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推荐创建方式， new 实现类(String...),传入一个或多个ioc配置文件名称</span></span><br><span class="line"><span class="comment">配置文件的名称是根据编译后的target文件中的的classes进行查找的，由于resources下面直接创建了xml文件</span></span><br><span class="line"><span class="comment">，所以相对应的classes下直接有相应的xml文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-03.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取Bean对象</span></span><br><span class="line"><span class="comment">//方法1,只传入bean的id名，需要强转，不推荐</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)applicationContext.getBean(<span class="string">&quot;person&quot;</span>);</span><br><span class="line"><span class="comment">//方法2，传入bean的id和相应的Class类</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line"><span class="comment">//方法3， 只传入要获取的类的Class</span></span><br><span class="line"><span class="comment">//要求：</span></span><br><span class="line"><span class="comment">//   使用该方法必须在配置文件里，有且只能有该类的一个Bean，不能有多个</span></span><br><span class="line"><span class="comment">//   若多个，则报异常 NoUniqueBeanDefinitionException</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> applicationContext.getBean(Person.class);</span><br><span class="line"><span class="comment">//此外，可以通过该类的父类的Class获取对象</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> applicationContext.getBean(Animal.class);</span><br></pre></td></tr></table></figure><p>推荐在test文件夹下面创建测试类，如下图所示。</p><p><img src="/../images/image-20241031184949948.png" alt="image-20241031184949948"></p><p>这里我们可以看到成功的获取了对象和实现了相应的方法</p><p><img src="/../images/image-20241031185027013.png" alt="image-20241031185027013"></p><h3 id="3-其他细节内容"><a href="#3-其他细节内容" class="headerlink" title="3.其他细节内容"></a>3.其他细节内容</h3><p>以下代码均是之前学习时的产物，没必要重新写了，就复制过来了</p><p>1.bean标签的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    类似tomcat的servlet的生命周期</span></span><br><span class="line"><span class="comment">            init-method: 在该对象创建后就调用指定的对象的一个函数，必须是无参、public且返回值为void</span></span><br><span class="line"><span class="comment">            destory-mothod: 该对象销毁时调用的方法，要求同上</span></span><br><span class="line"><span class="comment">            注意：简而言之就是一旦管理这个bean的类被创建后就会调用init-method,类close()后就会调用destory-method。与通过getBean()获取对象无关，因为bean对象早就创建了，这只是引用创建的对象而已。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    scope属性指定该Bean每次被Ioc容器对象使用getBean()方法获取后是否是单例的</span></span><br><span class="line"><span class="comment">            prototype: 多例</span></span><br><span class="line"><span class="comment">            singleton: 单例， 默认值</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            容器管理范围:</span></span><br><span class="line"><span class="comment">                单例模式下的 Bean 由 Spring 容器管理其整个生命周期，包括创建和销毁。</span></span><br><span class="line"><span class="comment">                多例模式下的 Bean 由客户端代码管理其生命周期，Spring 容器仅负责创建。</span></span><br><span class="line"><span class="comment">            所以多例模式下的Bean在Ioc容器close()后不会被调用destroy-method</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;javaBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ldy.ioc04.JavaBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取原始类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--.直接通过原始类赋值获取DataSource--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.配置文件赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过配置文件赋值给原始类获取DataSource</span></span><br><span class="line"><span class="comment">      &lt;context:property-placeholder 引用配置文件 location=&quot;classpath:druid.properties&quot;指明配置文件在类路径下</span></span><br><span class="line"><span class="comment">      使用$&#123;变量名&#125;来获取配置文件中的属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;xxx.url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.配合注解进行包扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--指定包下面进行注解扫描</span><br><span class="line">        base-package： 包名，该包以下的所有类和子包中的所有类都会被扫描</span><br><span class="line">--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.ldy&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="三、基于配置类的方式管理bean"><a href="#三、基于配置类的方式管理bean" class="headerlink" title="三、基于配置类的方式管理bean"></a>三、基于配置类的方式管理bean</h2><p>Spring从2.5版本开始提供了对注解技术的全面支持，我们可以使用注解来实现自动装配，简化Spring的xml配置。</p><p>Spring通过注解实现自动装配：</p><ol><li>引入依赖</li><li>开启组件扫描</li><li>使用注解定义Bean</li><li>依赖注入</li></ol><h3 id="1-注解介绍"><a href="#1-注解介绍" class="headerlink" title="1.注解介绍"></a>1.注解介绍</h3><p>基本的类上注解</p><p><img src="/../images/image-20241031192752509.png" alt="image-20241031192752509"></p><p><strong>@ComponentScan用于批量注册bean。</strong></p><p>这个注解会让spring去扫描某些包及其子包中所有的类，然后将满足一定条件的类作为bean注册到spring容器容器中。</p><p><strong>@Autowired注入</strong><br>        单独使用@Autowired注解，默认根据类型装配（byType）</p><p>@Autowired注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须存在，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在就注入，不存在也不报错。</p><p><strong>@Qualifier搭配@Autowired使用</strong></p><p>若@Autowired注入的类有多个实现类，需要指定某个实体类时，在@Autowired注解下面添加@Qualifier(“指定实现类的id”)来指定注入的实现类。</p><p><strong>@Resource整合了@Autowired和@Qualifier一起的功能</strong></p><ol><li>指定@Resource中的name，则根据名称装配</li><li>未指定name时，则根据属性名装配</li><li>未指定name，属性名也不一致，则根据类型装配</li></ol><p>使用该注解需要导入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@PropertySource配置文件引用</strong></p><p>示例:@PropertySource(value&#x3D;”classpath:jdbc.properties”),与xml的配置文件路径写法一致。</p><h3 id="2-实际操作"><a href="#2-实际操作" class="headerlink" title="2.实际操作"></a>2.实际操作</h3><p><strong>1.简单操作</strong></p><p>创建配置类</p><p><img src="/../images/image-20241031195230545.png" alt="image-20241031195230545"></p><p>给各个组件添加注解，以下是其中一个类</p><p><img src="/../images/image-20241031195322823.png" alt="image-20241031195322823"></p><p>给之前写的类添加上上述注解之后，用AnnotationConfigApplicationContext获取ApplicationContext类进行测试。</p><p><img src="/../images/image-20241031194955240.png" alt="image-20241031194955240"></p><p><strong>2.详细内容</strong></p><p>之前所学习时的配置类代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用配置类而不使用xml进行ioc容器的配置</span></span><br><span class="line"><span class="comment">   @Configuration   ioc配置类</span></span><br><span class="line"><span class="comment">   @@ComponentScan   包扫描</span></span><br><span class="line"><span class="comment">   @PropertySource    配置文件引用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.ldy&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(value=&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfigure</span> &#123;</span><br><span class="line">    <span class="comment">//  bean由@Bean注解标注，并且对象类型为方法返回的类型，id默认为方法名</span></span><br><span class="line">    <span class="comment">//  配置文件的Di配置由参数（注解+参数声明）来获取配置参数，以便进行依赖注入</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;xxx.url&#125;&quot;)</span> String url, <span class="meta">@Value(&quot;$&#123;xxx.driverClassName&#125;&quot;)</span> String driverClassName,<span class="meta">@Value(&quot;$&#123;xxx.username&#125;&quot;)</span> String username, <span class="meta">@Value(&quot;$&#123;xxx.password&#125;&quot;)</span> String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    配置类的Di中，参数作为方法参数被传入</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>全注解开发就是不再使用spring配置文件了，写一个配置类来代替配置文件。用注解配置还是很方便的。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring java ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring技术总结01-环境搭建</title>
      <link href="/2024/10/29/spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9301-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/10/29/spring%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%9301-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring技术总结01-环境搭建"><a href="#Spring技术总结01-环境搭建" class="headerlink" title="Spring技术总结01-环境搭建"></a>Spring技术总结01-环境搭建</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>Spring指的是Spring Framework，通常我们称之为Spring框架。Spring框架是一个分层的面向切面的Java应用程序的一站式解决框架，它是Spring技术栈的核心和基础，是为了解决企业级引用开发的复杂性而创建的。</p><p> Spring有两个核心模块：IoC和AOP。</p><p> Ioc：Inverse of Control的简写，为 控制反转，指把创建对象交给Spring进行管理。即不通过new 对象的方式在dao、service等Impl类中获取对象，而是通过xml文件或者配置类的方式统一管理所有对象，将所需对象注入到其他对象。其他</p><p> AOP：Aspect Oriented Programming 的简写，为 面向对象编程。AOP用来封装多个类的公共行为，将那些与业务无关，却为业务模块共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP还解决一些系统层面上的问题，比如日志、事务、权限等。</p><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a><strong>1.创建项目</strong></h3><p>首先，使用Idea中maven这个中间件来创建一个项目。</p><p><img src="/../images/image-20241030183104957-17302943901662.png" alt="image-20241030183104957"></p><h3 id="2-检查Maven设置"><a href="#2-检查Maven设置" class="headerlink" title="2.检查Maven设置"></a><strong>2.检查Maven设置</strong></h3><p>创建完成之后，记得要查看Idea的settings中的Build,Execution,Deployment-&gt;Build Tools-&gt;Maven中的Maven home path,把其改为自己配置的maven文件夹路径，而不是idea默认自带的，然后检查User settings file 和local repository的路径是否正确，不正确要勾选Override进行修改。</p><p><img src="/../images/image-20241030183334305.png" alt="image-20241030183334305"></p><h3 id="3-导入基本依赖以及相关实用插件推荐"><a href="#3-导入基本依赖以及相关实用插件推荐" class="headerlink" title="3.导入基本依赖以及相关实用插件推荐"></a><strong>3.导入基本依赖以及相关实用插件推荐</strong></h3><p><strong>基本依赖项</strong></p><p>1.spring-context依赖。当spring-context依赖引入后，spring的基础依赖已经引入了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;6.0.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.junit5测试依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.11.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>插件推荐</strong></p><p>1.JBLJavaToWeb插件。方便创建web项目。</p><p><img src="/../images/image-20241030193153121.png" alt="image-20241030193153121"></p><p>在项目根文件夹上右键会出现JBLJavaToWeb选项，点击之后，会自动将项目改为web工程项目。</p><p><img src="/../images/image-20241030193425685.png" alt="image-20241030193425685"></p><p>即在src文件下添加webapps文件夹</p><p><img src="/../images/image-20241030194249420.png" alt="image-20241030194249420"></p><p>并在项目的pom.xml文件里设置packing标签内容为war</p><p><img src="/../images/image-20241030194424280.png" alt="image-20241030194424280"></p><p>2.maven-search插件。该插件可以搜索依赖，选择所需依赖的版本，复制依赖的导入语句，省去了去官网查询依赖的麻烦。</p><p><img src="/../images/image-20241030200033114.png" alt="image-20241030200033114"></p><p>使用方法，在Idea上方导航栏的Tools中的Maven Serach选项。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring java ioc aop tx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器项目03</title>
      <link href="/2024/10/11/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE03/"/>
      <url>/2024/10/11/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE03/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器项目03"><a href="#在线音乐播放器项目03" class="headerlink" title="在线音乐播放器项目03"></a>在线音乐播放器项目03</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于网页移植，原本是想把学的音乐播放器移植到原来写的代码中，但经过该音乐播放器的html、css代码学习后，发现自己原来的页面代码写的依托，结构比较混乱，故我决定抛弃原来的页面，转而针对当前音乐播放器的页面进行更改和重新设计。</p><h3 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h3><h4 id="一-页面设计"><a href="#一-页面设计" class="headerlink" title="一.页面设计"></a>一.页面设计</h4><p>1.将原有的界面进行了扩展，增加了播放设置和音量调节功能，并且将其移动至页面下方。</p><p><img src="/../images/image-20241011205539766.png" alt="image-20241011205539766"></p><p>2.增加了侧边导航栏进行功能扩展。</p><p><img src="/../images/image-20241011205618172.png" alt="image-20241011205618172"></p><p>3.搜索功能的展现与音乐列表展开的实现原理一致，将其放在页面左边。同时实现了交互，异步通过后端爬虫获取歌曲数据。</p><p><img src="/../images/image-20241011205741029.png" alt="image-20241011205741029"></p><p><img src="/../images/image-20241011211226658.png" alt="image-20241011211226658"></p><h4 id="二、音乐信息爬取"><a href="#二、音乐信息爬取" class="headerlink" title="二、音乐信息爬取"></a>二、音乐信息爬取</h4><p>原本我想爬取音乐搜索器来进行音乐数据的爬取，以为它已经实现了网易云音乐数据的爬取，但它的内容是动态加载的，需要使用动态爬取的方式，效率低，而且我只能爬到搜索到的第一首歌曲的具体信息，其他的歌曲我看了源码没有找到可以获取的数据，此外，我的爬虫只能爬取英文歌曲和部分中文歌曲，查了很多信息，不知道为什么，一些中文歌曲在爬取时不能成功爬取，明明网址是对的，自己输入可以正常访问，考虑到了编码问题，但还是没发现问题出在哪里。</p><p>所以我打算重新设计爬虫，直接爬取网易云的，但目前爬虫教程都是python爬取网易云，所以我准备学习python的爬取方式再将思想移植到java爬虫里。</p><p>原来的想法代码展示。</p><p><img src="/../images/image-20241011210651630.png" alt="image-20241011210651630"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>在实现音乐信息爬取以及相关交互bug的修复后，对于后面页面的功能扩展和页面新增的进度会变得缓慢，我想还是先学习更多的前后端·知识之后再来进行实现。哎，实现这个项目还是要挺多知识，感觉自己学了挺多，但做起来还是好多东西要学。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器项目02</title>
      <link href="/2024/10/01/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE02/"/>
      <url>/2024/10/01/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE02/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器项目02"><a href="#在线音乐播放器项目02" class="headerlink" title="在线音乐播放器项目02"></a>在线音乐播放器项目02</h1><h3 id="目前进度"><a href="#目前进度" class="headerlink" title="目前进度"></a>目前进度</h3><h5 id="1-初步构建了上方导航栏，以及实现了搜索联想功能-如下图所示。"><a href="#1-初步构建了上方导航栏，以及实现了搜索联想功能-如下图所示。" class="headerlink" title="1.初步构建了上方导航栏，以及实现了搜索联想功能,如下图所示。"></a>1.初步构建了上方导航栏，以及实现了搜索联想功能,如下图所示。</h5><p><img src="/../images/image-20241001003911303.png" alt="image-20241001003911303"></p><p>通过看之前的javaweb项目重新复习一遍了搜索联想功能的实现。</p><h5 id="2-设置了分页查询功能。"><a href="#2-设置了分页查询功能。" class="headerlink" title="2.设置了分页查询功能。"></a>2.设置了分页查询功能。</h5><p>这次的分页查询并没有像之前的web项目一样，通过每次点击相应的图标而发送请求到servlet中进行交互，而是通过vue的帮助，实现了一次获取数据即可实现分页查询功能，很是方便。</p><h5 id="3-重新设计了音乐播放器的显示"><a href="#3-重新设计了音乐播放器的显示" class="headerlink" title="3.重新设计了音乐播放器的显示"></a>3.重新设计了音乐播放器的显示</h5><p>由于html自带的audio标签的样式不是很好看，所以查找了各种信息，最终在B站找到了一个很不错的视频，通过该视频的学习，在另一个网页初步构建了新的音乐播放器，后续会完成该播放器其余内容后将其移植到当前的音乐播放器项目里。如下图所示。</p><p><img src="/../images/image-20241001004512225.png" alt="image-20241001004512225"></p><p>学习视频链接【HTML+CSS3+JS实现音乐播放器项目】<a href="https://www.bilibili.com/video/BV1tj411N7SH?vd_source=ad14811b0629f215912c584fbe9d9875%E8%BF%99%E4%B8%AA%E8%A7%86%E9%A2%91%E5%8F%AF%E4%BB%A5%E8%AF%B4%E6%94%B6%E8%8E%B7%E7%9B%B8%E5%BD%93%E5%A4%9A%EF%BC%8C%E8%AE%A9%E6%88%91%E5%AF%B9%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%E6%9C%89%E4%BA%86%E6%96%B0%E7%9A%84%E8%AE%A4%E8%AF%86%E5%92%8C%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%86%99%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91%E4%B8%8E%E8%A7%84%E8%8C%83%E3%80%82">https://www.bilibili.com/video/BV1tj411N7SH?vd_source=ad14811b0629f215912c584fbe9d9875这个视频可以说收获相当多，让我对网页布局有了新的认识和更好的写代码逻辑与规范。</a></p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>我先把分页查询功能完善后，晚点再写吧。</p><p>2024&#x2F;10&#x2F;7</p><h5 id="一、自定义音乐播放器交互功能实现流程："><a href="#一、自定义音乐播放器交互功能实现流程：" class="headerlink" title="一、自定义音乐播放器交互功能实现流程："></a>一、自定义音乐播放器交互功能实现流程：</h5><p>1.先通过ajax将音乐数据从数据库中读取出来存入变量musiclist中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.加载音乐列表信息</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/mvn01/test&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        musiclist = data;</span><br><span class="line">        <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">       <span class="title function_">renderMusicList</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.在点击播放按钮后，除了要播放当前音乐外，还需要将页面背景和音乐信息卡片的内容进行更改，由于该功能具有复用性，所以需要新建加载函数来实现相应的内容更改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据信息，设置页面对应的标签内容</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.name&quot;</span>).<span class="title function_">text</span>(data.<span class="property">name</span>);</span><br><span class="line">    $(<span class="string">&quot;.singer&quot;</span>).<span class="title function_">text</span>(data.<span class="property">singer</span>);</span><br><span class="line">    $(<span class="string">&quot;.time&quot;</span>).<span class="title function_">text</span>(data.<span class="property">time</span>);</span><br><span class="line">    $(<span class="string">&quot;.cover img&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, data.<span class="property">cover</span>);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, data.<span class="property">audio_url</span>);</span><br><span class="line">    $(<span class="string">&quot;.mask_bg&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">        <span class="attr">background</span>: <span class="string">`url(&quot;<span class="subst">$&#123;data.cover&#125;</span>&quot;) no-repeat center center`</span>,</span><br><span class="line">        <span class="string">&quot;background-size&quot;</span> : <span class="string">&quot;cover&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>给播放按钮添加点击事件时需要考虑当前的播放状态，一开始的想法是判断当前的播放图标来更改音乐的播放与暂停，但在实现音乐的上一首和下一首的功能时，若当前是播放，会出现下一首显示图标暂停，下下一首显示播放，而实际上都是在播放的问题，因为audio在更换音乐源时，图标没有继续更改。所以为了方便，发现了可以用audio的paused属性<code>$(&quot;audio&quot;).get(0).paused</code> 可以告知音乐是否暂停，若暂停，则返回true。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给播放按钮添加点击事件</span></span><br><span class="line">$(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.判断当前播放状态</span></span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="property">paused</span>)&#123;</span><br><span class="line">        <span class="comment">//修改播放状态</span></span><br><span class="line">        isplay = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//0.改变播放图标状态</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/暂停.png&quot;</span>);</span><br><span class="line">        <span class="comment">//1.音乐播放</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">play</span>();</span><br><span class="line">        <span class="comment">//2.动态显示卡片信息</span></span><br><span class="line">        $(<span class="string">&quot;.player-info&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">            <span class="attr">top</span>: <span class="string">&#x27;-100%&#x27;</span>,</span><br><span class="line">            <span class="attr">opacity</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封面旋转起来</span></span><br><span class="line">        $(<span class="string">&quot;.cover&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;animation-play-state&quot;</span>, <span class="string">&quot;running&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//修改播放状态</span></span><br><span class="line">        isplay = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//0.改变播放图标状态</span></span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/播放.png&quot;</span>);</span><br><span class="line">        <span class="comment">//1.音乐暂停播放</span></span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">pause</span>();</span><br><span class="line">        <span class="comment">//2.动态显示卡片信息</span></span><br><span class="line">        $(<span class="string">&quot;.player-info&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">                <span class="attr">top</span>: <span class="string">&#x27;0%&#x27;</span>,</span><br><span class="line">                <span class="attr">opacity</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封面旋转暂停</span></span><br><span class="line">        $(<span class="string">&quot;.cover&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;animation-play-state&quot;</span>, <span class="string">&quot;paused&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.播放后重新渲染音乐列表</span></span><br><span class="line">    <span class="title function_">renderMusicList</span>(musiclist);</span><br></pre></td></tr></table></figure><p>4.实现上一首和下一首播放时，要注意变量的范围，不能一直加也不能一直减，所以要对音乐索引的临界点进行判定。此外再调用render函数和触发播放按钮的点击事件来进行音乐的播放。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给上一首按钮绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#prevBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.当前播放音乐索引减一</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        currentIndex --;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//若是第一首，则跳转至最后一首</span></span><br><span class="line">        currentIndex = musiclist.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用render函数  重新渲染歌曲信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//3.让音乐播放  触发播放按钮事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//给下一首按钮绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#nextBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.当前播放音乐索引加一</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex &lt; musiclist.<span class="property">length</span> - <span class="number">1</span>)&#123;</span><br><span class="line">        currentIndex ++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//若是最后一首，则跳转至第一首</span></span><br><span class="line">        currentIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.调用render函数  重新渲染歌曲信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//3.让音乐播放  触发播放按钮事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5.实现音乐播放列表的显示时，我们需要动态的实时更新音乐列表，所以要创建一个可复用的函数renderMusicList()以便播放状态信息的实时更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据音乐列表创建li</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderMusicList</span>(<span class="params">list</span>)&#123;</span><br><span class="line">    <span class="comment">//先清空列表</span></span><br><span class="line">    $(<span class="string">&quot;.music-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">each</span>(list, <span class="keyword">function</span>(<span class="params">index, item</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> $li = $(<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;li class=&quot;<span class="subst">$&#123;currentIndex == index ? <span class="string">&quot;playing&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;<span class="subst">$&#123;index+<span class="number">1</span> &lt; <span class="number">10</span>? <span class="string">&quot;0&quot;</span>+(index +<span class="number">1</span>) : index + <span class="number">1</span>&#125;</span>.<span class="subst">$&#123;item.name&#125;</span>-<span class="subst">$&#123;item.singer&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span data-index=&quot;<span class="subst">$&#123;index&#125;</span>&quot;&gt;&lt;img class=&quot;play-circle&quot; src=&quot;<span class="subst">$&#123;currentIndex == index &amp;&amp; !$(<span class="string">&quot;audio&quot;</span>).get(<span class="number">0</span>).paused ? <span class="string">&#x27;image/icon/暂停.png&#x27;</span>: <span class="string">&#x27;image/icon/播放.png&#x27;</span>&#125;</span>&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/li&gt;</span></span><br><span class="line"><span class="string">        `</span>);</span><br><span class="line">        <span class="comment">//重新加载列表</span></span><br><span class="line">        $(<span class="string">&#x27;.music-list&#x27;</span>).<span class="title function_">append</span>($li);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数所用的地方有 列表图标的点击事件、音乐列表中的播放按钮点击事件、主界面播放按钮的点击事件。主界面播放按钮的点击事件用到的地方多，涵盖了音乐列表信息更新所要关联的地方，方便实现动态更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给音乐列表绑定事件</span></span><br><span class="line">$(<span class="string">&quot;#openModal&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;.modal&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">            <span class="string">&quot;display&quot;</span>: <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="title function_">renderMusicList</span>(musiclist);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//给音乐列表按钮添加点击事件</span></span><br><span class="line">$(<span class="string">&quot;.music-list&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;li span&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//修改当前音乐索引</span></span><br><span class="line">    <span class="keyword">if</span>(currentIndex == $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;data-index&#x27;</span>))&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        currentIndex = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;data-index&quot;</span>);</span><br><span class="line">        <span class="comment">//先设置标签内容</span></span><br><span class="line">        <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再触发播放功能</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.顺序播放、随机播放和单曲循环的实现。该功能应该位于音乐播放结束时实现，所以要监听audio的ended状态，由于在添加移除监听事件需要指定移除的函数，否则无效，所以不能用匿名函数来添加点击事件，所以只能创建相应的函数来进行监听事件的更改。每次点击播放设置图标时，会移除监听audio的上一个事件，再添加当前事件。目前还未实现在随机播放状态下点击下一首时实现随机播放的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给音乐播放设置按钮绑定点击事件</span></span><br><span class="line">$(<span class="string">&quot;#setBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/随机播放.png&quot;</span>);</span><br><span class="line">        <span class="title class_">RadPlay</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>) == <span class="number">2</span>)&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/单曲循环.png&quot;</span>);</span><br><span class="line">        <span class="title class_">CirPlay</span>();</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;play-model&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;image/icon/顺序播放.png&quot;</span>);</span><br><span class="line">        $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="title class_">SeqPlay</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//顺序播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SeqPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, cirplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, seqplay)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">seqplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    currentIndex = currentIndex &gt; musiclist.<span class="property">length</span> - <span class="number">1</span> ? <span class="number">0</span> : currentIndex + <span class="number">1</span>;</span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//顺序播放直接出发下一首事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">RadPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, seqplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, radplay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//随机获取一个音乐索引</span></span><br><span class="line">    <span class="keyword">var</span> origin = currentIndex;</span><br><span class="line">    <span class="keyword">while</span>(origin == currentIndex)</span><br><span class="line">        currentIndex = <span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">100</span>) % musiclist.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">//重新渲染音乐信息</span></span><br><span class="line">    <span class="title function_">render</span>(musiclist[currentIndex]);</span><br><span class="line">    <span class="comment">//触发点击事件</span></span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CirPlay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">removeEventListener</span>(<span class="string">&quot;ended&quot;</span>, radplay);</span><br><span class="line">    $(<span class="string">&quot;audio&quot;</span>).<span class="title function_">get</span>(<span class="number">0</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;ended&quot;</span>, cirplay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cirplay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#playBtn&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&quot;click&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>我觉得网页最难懂的就是css了，样式太多了，设计页面好麻烦。我对前端内容不是很熟悉，所以在调整css样式方面可以说是相当难受，就是调整不到自己想要的显示效果，因为很多css属性我都是一点不清楚，问ai也是牛头不对马脚。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线音乐播放器搭建项目01</title>
      <link href="/2024/09/26/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE01/"/>
      <url>/2024/09/26/%E5%9C%A8%E7%BA%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E9%A1%B9%E7%9B%AE01/</url>
      
        <content type="html"><![CDATA[<h1 id="在线音乐播放器搭建项目01"><a href="#在线音乐播放器搭建项目01" class="headerlink" title="在线音乐播放器搭建项目01"></a>在线音乐播放器搭建项目01</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在学了html,  css, javascript, tomcat，jdbc，jsp等内容之后，闲来无事,又学了maven和vue、mybatis的基础内容，想搭建一个在线音乐播放器的网站，希望是类似于qq音乐和网易云音乐之类的网页音乐播放页面，虽然是不可能的，但还是想着试着自己做一下这个项目来巩固自己所学的内容。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>基于maven项目管理工具，同时遵循JavaEE的MVC设计模式搭建该项目。</p><h4 id="项目文件各部分内容说明："><a href="#项目文件各部分内容说明：" class="headerlink" title="项目文件各部分内容说明："></a>项目文件各部分内容说明：</h4><p><strong>数据库</strong>：先把音乐的相关数据存入到数据库maven当中的music表里，目前包含了四种字段，id, name（其实是文件存放位置）, img（图片存放位置） 和 singer。后期肯定是会添加新的列的，但暂时就放这四个字段。</p><p><strong>java</strong>:基于javaEE的三层架构创建相应文件。</p><p><img src="/../images/image-20240926002554656.png" alt="image-20240926002554656"></p><p><strong>resources</strong>:存放所需配置文件。</p><p><img src="/../images/image-20240926002656127.png" alt="image-20240926002656127"></p><p><strong>webapp</strong>: 存放除了java源码外的其他文件。</p><p><img src="/../images/image-20240926002408273.png" alt="image-20240926002408273"></p><h2 id="进度"><a href="#进度" class="headerlink" title="进度"></a>进度</h2><p>由于对前端代码的不熟悉，在构建页面，调整css属性，写js相关代码上面花了不少时间（设置布局好头疼）。</p><p>在找合适的标签进行绑定点击事件时，我一共试了三个标签 <code>&lt;input&gt; &lt;a&gt; 和 &lt;button&gt;</code>,由于input的value与显示的内容一致，button的按钮外观不好看。所以选择了a标签，将其name属性来存放歌曲存放位置信息，这与其展示的文本不冲突，所以很nice。</p><p>一开始我并没有通过vue来渲染页面，而是直接以静态的代码形式布局网页，所以一开始的这段添加点击事件的代码就行不通了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给超链接添加点击事件，由于a标签是动态渲染的，所以js里面的这个方法不能添加到新渲染的a标签中</span></span><br><span class="line"><span class="comment">// var as = document.getElementsByClassName(&quot;music_a&quot;);</span></span><br><span class="line"><span class="comment">// for(var i = 0; i &lt; as.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//     as[i].onclick = playMusic.bind(null, as[i]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>而是转变成了更为简便的把onclick事件直接添加到一个v-for标签下的a标签中即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;music_a&quot;</span> v-<span class="attr">bind</span>:name=<span class="string">&quot;&#x27;/mvn01/&#x27;+music.name&quot;</span> onclick=<span class="string">&quot;playMusic(this)&quot;</span>&gt;&#123;&#123;music.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如下图所示，目前仅通过vue和axios把数据库的信息传递到网页上面并渲染。目前数据库里面就两个音乐信息，所以看着还行，后面肯定要做分页或者一个可下拉式的列表来应对多个数据的情况。</p><p><img src="/../images/image-20240926003227508.png" alt="image-20240926003227508"></p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><h4 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h4><p>美化当前页面，在当前页面上方设计一个横式选择条或者右方设计一个可展开的页面选择条，来选择其他内容的页面。</p><p>给播放器添加字幕功能。</p><p>展示音乐列表的外观实现。</p><p>设置音乐播放界面。类似于<img src="/../images/image-20240926010101221.png" alt="image-20240926010101221"></p><h4 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h4><p>做好各个页面间的数据交互。</p><h4 id="希望做到项目完成的时刻，加油！！！！！"><a href="#希望做到项目完成的时刻，加油！！！！！" class="headerlink" title="希望做到项目完成的时刻，加油！！！！！"></a>希望做到项目完成的时刻，加油！！！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> 音乐播放器 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis哨兵模式</title>
      <link href="/2024/07/30/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/07/30/Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="哨兵模式概念"><a href="#哨兵模式概念" class="headerlink" title="哨兵模式概念"></a>哨兵模式概念</h1><p>Redis的哨兵模式（Sentinel）是一种高可用的部署方式，由一个或多个Sentinel实例组成的Sentinel系统可以监控和管理多个Redis实例。在哨兵模式下，有一个或多个哨兵进程监控Redis主服务器和备份服务器的状态，并在主服务器下线时自动切换到备份服务器，继续处理命令请求。<br>详解见链接<a href="http://t.csdnimg.cn/FY1Pq">http://t.csdnimg.cn/FY1Pq</a></p><h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><p>首先在主机上配置个一主两从的redis服务器，这里我配置了3个redis配置文件，其中redis-6381.conf是主节点</p><p><img src="/../images/image-20240730085620963.png" alt="image-20240730085620963"></p><p>再配置至少一个sentinel.conf配置文件，里面只需要加入如下语句（可在命令行用 <code>vi &lt;文件地址&gt;</code> 进行直接编写）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor &lt;主节点名称，任意即可&gt;  &lt;主节点ip地址，例127.0.0.1&gt;  &lt;主节点端口号&gt;</span><br></pre></td></tr></table></figure><p>如下所示，conf文件第一行即为加入的语句，语句下面是使用过程中产生的日志</p><p><img src="/../images/image-20240730090039350.png" alt="image-20240730090039350"></p><p>然后在命令行分别启动这三个节点的服务器(例: <code>redis-server myredis/redis-6380.conf</code>) 以及启动哨兵模式 (例: <code>redis-sentinel redis_sentinel/sentinel2.conf</code>)</p><p>最后就可以成功看到命令行中sentinel已经成功监控主节点了</p><p><img src="/../images/image-20240730091105753.png" alt="image-20240730091105753"></p><p>再把端口号为6381的这个主节点服务器关闭(在客户端使用shutdown命令)，可以看到</p><p><img src="/../images/image-20240730091438684.png" alt="image-20240730091438684"></p><p>由最后一句知道，新的主节点转换为了6382，查看6381和6382的从属关系可知已经改变了。</p><p><img src="/../images/image-20240730091615627.png" alt="image-20240730091615627"></p><p>这时，再把原来的主节点6381重新启动，哨兵检测到6381的恢复并主动将其设置为6382的从节点，如下图所示:</p><p><img src="/../images/image-20240730091904396.png" alt="image-20240730091904396"></p><p>至此，哨兵模式的简单实现流程就完成了，更加具体的内容还是查看其他博主的帖子吧。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis主从复制</title>
      <link href="/2024/07/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2024/07/09/redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="主从复制概念"><a href="#主从复制概念" class="headerlink" title="主从复制概念"></a>主从复制概念</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower) ; 数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>默认情况下，每台Redis服务器都是主节点 ;且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><h2 id="Redis服务启动方式"><a href="#Redis服务启动方式" class="headerlink" title="Redis服务启动方式"></a>Redis服务启动方式</h2><h4 id="1-默认启动方式"><a href="#1-默认启动方式" class="headerlink" title="1.默认启动方式"></a>1.默认启动方式</h4><blockquote><p> 服务端：.&#x2F;redis-server </p><p>client端：.&#x2F;redis-cli </p><p>退出： .&#x2F;redis-cli shutdown</p></blockquote><h4 id="2-指定端口启动"><a href="#2-指定端口启动" class="headerlink" title="2.指定端口启动"></a>2.指定端口启动</h4><blockquote><p> 服务端：.&#x2F;redis-server –port 端口号 </p><p>client端：.&#x2F;redis-cli -p 端口号 </p><p>退出： .&#x2F;redis-cli -p 端口号 shutdown</p></blockquote><h4 id="3-指定端口ip连接"><a href="#3-指定端口ip连接" class="headerlink" title="3.指定端口ip连接"></a>3.指定端口ip连接</h4><blockquote><p>服务端：.&#x2F;redis-server –port 端口号</p><p>client端：.&#x2F;redis-cli -p 端口号 -h 127.0.0.1</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="1-获取当前redis的信息"><a href="#1-获取当前redis的信息" class="headerlink" title="1.获取当前redis的信息"></a>1.获取当前redis的信息</h4><p>注意默认端口为6379，且该端口默认为主节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server  //开启redis服务端, 默认port 6380 ip 127.0.0.1</span><br><span class="line"></span><br><span class="line">redis-cli  //连接到该redis服务端，默认port 6380 ip 127.0.0.1</span><br><span class="line"></span><br><span class="line">info replication  //查看当前redis的信息，含主从节点信息</span><br></pre></td></tr></table></figure><h4 id="2-获取子节点6380的信息"><a href="#2-获取子节点6380的信息" class="headerlink" title="2.获取子节点6380的信息"></a>2.获取子节点6380的信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server --port 6380  //开启端口为6380的服务端</span><br><span class="line"></span><br><span class="line">redis-cli -p 6380 (-h 127.0.0.1 若ip未改，默认可不写)  //redis的cli(客户端)指定端口与ip连接到指定的服务端</span><br><span class="line"></span><br><span class="line">info replication  //查看当前redis的信息，含主从节点信息</span><br></pre></td></tr></table></figure><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h4 id="1-复制端口号6379的redis配置文件到redis的执行目录"><a href="#1-复制端口号6379的redis配置文件到redis的执行目录" class="headerlink" title="1.复制端口号6379的redis配置文件到redis的执行目录"></a>1.复制端口号6379的redis配置文件到redis的执行目录</h4><p>查询redis的配置文件方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli config get dir</span><br></pre></td></tr></table></figure><p>这个命令返回的是redis的安装目录，配置文件应位于该目录下，注意etc这个位置是其他文件存放位置</p><h4 id="2-复制配置文件到要启动的redis其他端口的目录下-然后执行以下命令"><a href="#2-复制配置文件到要启动的redis其他端口的目录下-然后执行以下命令" class="headerlink" title="2.复制配置文件到要启动的redis其他端口的目录下,然后执行以下命令"></a>2.复制配置文件到要启动的redis其他端口的目录下,然后执行以下命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp redis.config redis-6380.config</span><br></pre></td></tr></table></figure><p>拷贝的配置文件名自己定，如redis-6380.config</p><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><p>下载一个可以打开配置文件的编辑器，推荐subllime</p><p>然后打开配置文件，用ctrl+f查询下面的语句然后进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 1. 修改端口号，一主多从模式，此教程中我默认是以6379为主，6380、6381为从</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 2.开启守护进程模式运行，默认是no，这个要搜</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"># 3. 修改pid文件名，我是以端口来区分的</span><br><span class="line"></span><br><span class="line">pidfile &quot;/var/run/redis_6379.pid&quot;</span><br><span class="line"></span><br><span class="line"># 4.拷贝多个 redis.conf 配置文件，并按照以上步骤修改配置文件</span><br></pre></td></tr></table></figure><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>因为不了解ubuntu系统，导致我实现主从复制花了2个小时才成功。</p><p>首先一定要先知道redis的服务启动方法，因为这个网上找的有些命令是错误的，导致我开启自定义端口的服务端一直有问题，本文所给命令是我经实践后成功的。</p><p>其次，redis.config这个配置文件我找了半天，才发现在其他文件位置里。同时，要打开配置文件推荐使用sublime。</p><p>最后，不一定要改在配置文件中配置主节点，可以在子节点使用 <code>slaveof 主节点id 主节点端口号</code> 命令来建立主从关系，但如果在配置文件中配置了，那么重启也就不会失效了。</p><h2 id="重大发现"><a href="#重大发现" class="headerlink" title="重大发现"></a>重大发现</h2><p>原来我的操作还是有很大问题，初步了解了linux的命令行操作过后，发现了一个重点，这是针对我电脑的ubuntu系统实现redis主从复制的关键。</p><p>依赖配置文件在服务器端启动redis的方式应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server 配置文件地址(例如：myredis/redis-6380.conf)</span><br></pre></td></tr></table></figure><p>然后，重点来了，执行后，命令行提示我Permission Denied而无法启动redis,然后，我用root权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>之后再次输入同样的启动语句，虽然没显示redis启动界面，而且看似好像没有发生任何事一样，你依旧可以输入其他语句。</p><p>结果，当我再次打开终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6380</span><br></pre></td></tr></table></figure><p>发现成功在客户端启动这个redis服务器，随后输入的info replication显示的正是我所配置的redis-6380.conf文件.</p><p>这个成功实现的方法网上找遍了解决方案都没有找到，居然被我误打误撞找到了原因所在。估计是我的这个root权限有点问题，没设置好的缘故。</p><p>然后，就是<strong>服务端：.&#x2F;redis-server –port 端口号</strong> 这个启动redis服务器的方式估计是操作在默认文件夹下的配置文件，那个配置文件并没有被我修改过，所以查看主从关系时发现没有主从节点。</p><p>所以还是要用<code>redis-server 配置文件地址(例如：myredis/redis-6380.conf)</code>这个方式来启动相应文件的redis服务器。</p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><h4 id="9-21日"><a href="#9-21日" class="headerlink" title="9.21日"></a>9.21日</h4><p>之前配置实现主从节点后我发现主从的配置文件都变成了所属者为root，估计是以为配置文件里面的某些设置导致了主从设置后将配置文件的所有者改为了root，此外文件的读写权限也变成了只读。而且使用从节点进行写操作时会失败。</p><p>修改文件所属者和读写权限只要依照下面两条命令执行即可，之后进行操作时，其所属者和读写权限并不会改变，所以还是不知道是什么原因导致我一开始实现主从复制后。权限改变的原因是什么。</p><p>更改文件所属者的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown username 配置文件的路径</span><br></pre></td></tr></table></figure><p>更改文件读写权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+rw 配置文件的路径</span><br></pre></td></tr></table></figure><p>经过发现，redis配置文件里面有个<code>replica-read-only yes</code>的语句，这个语句表明了当前节点若是从节点的话，只能读取数据，不能修改数据，所以要把yes改为no。</p><p>此外，在以普通用户执行<code>redis-server myredis/redis-6380.conf</code>这句命令启动我指定的redis配置文件的服务时，会提示我权限不够，这是因为在配置文件里的语句<code>dir 存放路径</code>没有配置好，导致访问了root权限才能访问的文件夹，这个语句是指定存放rdb文件的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis学习01</title>
      <link href="/2024/07/07/redis01/"/>
      <url>/2024/07/07/redis01/</url>
      
        <content type="html"><![CDATA[<p><strong>我是通过vm虚拟机安装ubuntu系统来学习redis的。</strong></p><h3 id="一-redis的基本数据结构"><a href="#一-redis的基本数据结构" class="headerlink" title="一.redis的基本数据结构"></a>一.redis的基本数据结构</h3><p>redis有5种基础数据结构，分别是String、Hash、List、Set、SortedSet。除此之外还有HyperLogLog、Geo、Pub&#x2F;Sub, 算是高级的数据结构。</p><h4 id="01-String"><a href="#01-String" class="headerlink" title="01.String"></a>01.String</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; set name cmower</span><br><span class="line">OK</span><br><span class="line">&gt; get name</span><br><span class="line">&quot;cmower&quot;</span><br><span class="line">&gt; exists name</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; del name</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; get name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><p>1）set 命令用来存储一个键值对，在本例中，name 为 key，cmower 为 值。</p><p>2）get 命令用来获取一个键的值。</p><p>3）exists 命令用来测试一个键值对是否存在，<code>(integer) 1</code> 表示存在，<code>(integer) 0</code> 表示不存在。</p><p>4）del 命令用来删除一个键值对，<code>(integer) 1</code> 表示执行成功，<code>(integer) 0</code> 表示执行失败。</p><p>5）当键值对删除后，再通过 get 命令获取时，结果就为 <code>(nil)</code> 。</p><p>6）keys 命令用来查找键。例：*b表示所有以b结尾的键、 cmower 若存在则返回cmower</p><h4 id="02-List"><a href="#02-List" class="headerlink" title="02.List"></a>02.List</h4><p>Redis 列表由多个节点组成，每个节点包含一个字符串元素。列表可以存储任意数量的元素，而且列表中的元素可以重复。由于列表是双向链表，因此可以从列表的头部或尾部进行操作，这为实现先进先出（FIFO）或后进先出（LIFO）队列提供了基础。</p><p>常用命令<br><code>LPUSH key element [element …]</code></p><ul><li><p>描述：将一个或多个值插入到列表的头部。</p></li><li><p>示例：LPUSH list1 value1 value2</p></li></ul><p><code>RPUSH key element [element …]</code></p><ul><li><p>描述：将一个或多个值插入到列表的尾部。</p></li><li><p>示例：RPUSH list1 value1 value2</p></li></ul><p><code>LPOP key</code></p><ul><li><p>描述：移除并返回列表的第一个元素。</p></li><li><p>示例：LPOP list1</p></li></ul><p><code>RPOP key</code></p><ul><li><p>描述：移除并返回列表的最后一个元素。</p></li><li><p>示例：RPOP list1</p></li></ul><p><code>LRANGE key start stop</code></p><ul><li><p>描述：返回列表中指定范围的元素。</p></li><li><p>示例：LRANGE list1 0 5，返回列表的前六个元素。</p></li></ul><p><code>LLEN key</code></p><ul><li><p>描述：返回列表的长度。</p></li><li><p>示例：LLEN list1</p></li></ul><p><code>LINDEX key index</code></p><ul><li><p>描述：返回列表中指定位置的元素。</p></li><li><p>示例：LINDEX list1 2</p></li></ul><p><code>LREM key count value</code></p><ul><li><p>描述：移除列表中等于 value 的元素。</p></li><li><p>示例：LREM list1 2 value1，从列表头部开始移除前两个等于 value1 的元素。</p></li></ul><p><code>LTRIM key start stop</code></p><ul><li><p>描述：对一个列表进行修剪(trim)，使其只保留指定区间内的元素。</p></li><li><p>示例：LTRIM list1 0 10</p></li></ul><h4 id="03-Set"><a href="#03-Set" class="headerlink" title="03.Set"></a>03.Set</h4><p>Redis 的 Set 集合数据 , 与 List 列表功能相似 , 唯一的区别是 Set 集合中的元素 是 <strong>不允许重复</strong>的 ;</p><p>该 Set 集合 是一个 无序集合 , 存储 String 类型数据 ;</p><p>Set 集合底层是由 Hash 表实现 的 , 本质是 字典结构 , 其 添加 , 删除 , 查找 元素的 时间复杂度 是 O(1) ;</p><p>Java 的 HashSet 集合 内部由 HashMap 实现 , 所有的 值 Value 都指向同一个实例对象 ;</p><p>Redis 的 Set 集合 内部也是由 Hash 实现 , 所有的 值 Value 都指向同一个值 ;</p><p>常用命令</p><p>添加和删除与list差不多一致 SADD, SREM</p><p><code>SMEMBERS key</code></p><ul><li>描述：获取key集合的所有元素</li><li>示例：SMEMBERS name</li></ul><p><code>SISMEMBER key value</code></p><ul><li>描述：判断key键中是否存在value值</li><li>示例：SISMEMBER name Alice. 存在返回1，不存在返回0</li></ul><p><code>SCARD key</code></p><ul><li><p>描述：获取集合元素的个数</p></li><li><p>示例：SCARD name. 返回name中元素的个数</p></li></ul><p><code>SINTER key1 key2</code></p><ul><li><p>描述：获取两个集合的交集</p></li><li><p>示例：SINTER course1 course2</p></li></ul><p><code>SUNION key1 key2</code></p><ul><li><p>描述：获取两个集合的并集</p></li><li><p>示例：SUNION course1 course2</p></li></ul><p><code>SDIFF key1 key2</code></p><ul><li><p>描述：获取两个结合的差集</p></li><li><p>示例：SDIFF course1 course2</p></li></ul><p><code>SMOVE key1 key2 value</code></p><ul><li><p>描述：将key集合中的value值移动到key2集合中，key1中的value消失，key2中出现key1中消失的value</p></li><li><p>示例：SMOVE course1 course2 math. 若course1中不含math，则返回0；若含，则返回1</p></li></ul><h4 id="04-Hash"><a href="#04-Hash" class="headerlink" title="04.Hash"></a>04.Hash</h4><p>哈希类型是指Redis键值对中的<strong>值本身又是一个键值对结构</strong>，形如value&#x3D;[{field1，value1}，…{fieldN，valueN}]，</p><p>Hash主要就是对一个对象的多重属性(如人的姓名，性别，年龄)的存储</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/d17466ab22014931a1565c8046259903.png?x-oss-process=image/resize,w_1400/format,webp" alt="image.png"></p><p>同样是存储字符串，Hash 与String 的主要区别？</p><ol><li>把所有相关的值聚集到一个key 中，节省内存空间</li><li>只使用一个key，减少key 冲突</li><li>当需要批量获取值的时候，只需要使用一个命令，减少内存&#x2F;IO&#x2F;CPU 的消耗</li></ol><p><strong>常用命令</strong></p><p><code>HSET key field value</code></p><ul><li>描述：将哈希表key中的域field的值设置为value</li><li>示例：HSET person name ldy</li></ul><p><code>HGET key field</code></p><ul><li>描述：获取哈希表key中的域field的值</li><li>示例：HGET person name</li></ul><p><code>MHSET key field1 value1 field2 value2 ......</code></p><ul><li>描述：同时将多个field-value(字段-值)对设置到哈希表key中</li><li>示例：MHSET person name ldy age 15 sex male</li></ul><p><code>MHGET key field1 field2 ......</code></p><ul><li>描述：同时获取多个哈希表key中字段的值</li><li>示例：MHGET person name age sex</li></ul><p><code>HGETALL key</code></p><ul><li>描述：获取哈希表key中所有字段和值</li><li>示例：HGETALL person</li></ul><p><code>HDEL key field1 [field2、field3、... ]</code></p><ul><li>描述：删除哈希表key中的一个或多个指定字段，不存在的字段将被忽略,返回值为删除的字段个数</li><li>示例：HDEL person name age</li></ul><p><code>HLEN key</code></p><ul><li>描述：获取哈希表中字段的数量，当key不存在时返回0</li><li>示例：HLEN person</li></ul><p><code>HEXISTS key field</code></p><ul><li>描述：查看哈希表是否含有指定字段，有返回1，无返回或者key不存在返回0</li><li>示例：HEXISTS person age</li></ul><p><code>HKEYS key</code></p><ul><li>描述：获取哈希表中所有的字段</li><li>示例：HKEYS person</li></ul><p><code>HVALUES key</code></p><ul><li>描述：获取哈希表中所有字段的属性</li><li>示例：HVALUES person</li></ul><p><code>HINCRBY key field 数值</code></p><ul><li>描述：为哈希表中的字段值加上指定的增量</li><li>示例：HINCRBY person age 10</li><li>注意：增量也可以为负数，相当于对指定字段进行减法操作。如果哈希表的 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。如果指定的字段不存在，那么在执行命令前，字段的值被初始化为 0 。对一个储存字符串值的字段执行 HINCRBY 命令将造成一个错误。</li></ul><p><code>HSETNX key field1 value1</code></p><ul><li>描述：为哈希表中不存在的字段赋值</li><li>示例： HSETNX person name ldh age 33</li><li>注意：如果哈希表不存在，一个新的哈希表被创建并进行 HSET 操作。如果字段已经存在于哈希表中，操作无效。如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。设置成功，返回 1 。 如果给定字段已经存在且没有操作被执行，返回 0</li></ul><h4 id="05-SortedSet"><a href="#05-SortedSet" class="headerlink" title="05.SortedSet"></a>05.SortedSet</h4><p>Sorted Sets 与 Sets 类似，是一种集合类型，集合中<strong>不会出现重复的数据（member）</strong>。区别在于 Sorted Sets 元素由两部分组成，分别是 member 和 score。</p><p>member 会关联一个 double 类型的分数（score），sorted sets 默认会根据这个 score 对 member 进行从小到大的排序，如果 member 关联的分数 score 相同，则按照字符串的字典顺序排序。</p><p><img src="D:\MyBlog\img\redis\60daf3de60c4d07fa4eaecac6002acb7.png" alt="60daf3de60c4d07fa4eaecac6002acb7"></p><p>常用命令</p><p><code>ZADD key score1 member1 [socre2 member2、... ...]</code></p><p><code>ZCARD key</code></p><p><code>ZRANGE key start stop [WITHSCORES]</code></p><p><code>ZREVRANGE key start stop [WITHSCORES]</code></p><p><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</code></p><p><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code></p><p><code>ZCOUNT key min max</code></p><p><code>ZINCRBY key increment member</code></p><p><code>ZRANK key member</code></p><p><code>ZREVRANK key member</code></p><p><code>ZREM key member [member ...]</code></p><p><code>ZREMRANGEBYRANK key start stop</code></p><p><code>ZREMRANGEBYSCORE key min max</code></p><p><code>ZSCORE key member</code></p><p>详见网址<a href="https://blog.csdn.net/aitangyong/article/details/51967362">redis数据类型SortedSet的常用命令-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式</title>
      <link href="/2024/05/24/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/05/24/EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="  EL表达式"></a><center>  <strong>EL表达式</strong><center></h1><blockquote><h3 id="1-EL表达式概述"><a href="#1-EL表达式概述" class="headerlink" title="1. EL表达式概述"></a><strong>1. EL表达式概述</strong></h3></blockquote><ul><li>EL（Express Language）表达式可以嵌入在JSP页面内部，减少JSP脚本的编写，EL出现的目的是要替代JSP页面中脚本的编写。通俗讲就是通过使用EL表达式来减少java代码的编写。</li></ul><blockquote><h3 id="2-EL从域中取出数据"><a href="#2-EL从域中取出数据" class="headerlink" title="2. EL从域中取出数据"></a><strong>2. EL从域中取出数据</strong></h3></blockquote><ul><li><p>JSP脚本：&lt;%&#x3D;request.getAttribute(name)%&gt;</p></li><li><p>EL表达式替代上面的脚本：${requestScope.name}</p></li><li><p>EL最主要的作用是获得四大域中的数据，格式为<u>${EL表达式}</u></p></li><li><p>EL获得pageContext域中的值：$(pageScope.key);</p></li><li><p>EL获得request域中的值：$(requestScope.key);</p></li><li><p>EL获得session域中的值：$(sessionScope.key);</p></li><li><p>EL获得application域中的值：$(applicationScope.key);</p></li><li><p>EL从四个域中获得某个值:  <u><strong>$(key</strong>)</u></p></li></ul><p> <u><strong>$(key</strong>)</u>该方法和pageContext.findAttribute()一样,同样是依次从pageContext域，request域，session域，application域中 获取属性，在某个域中获取后将不再向后寻找。</p><p><strong>示例：</strong></p><ul><li><p>EL获得普通字符串</p><p><code>$&#123;str&#125;</code></p></li><li><p>EL获得User对象的值</p></li><li><p>EL获得List<String>的值</p></li><li><p>EL获得List<User>的值</p></li><li><p>EL获得Map&lt;String,String&gt;的值</p></li><li><p>EL获得Map&lt;String,User&gt;的值</p></li><li><p>EL获得Map&lt;String, List<User>&gt;的值</p></li></ul><p>​</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EL </tag>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一篇博客</title>
      <link href="/2024/05/23/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/05/23/%E8%BF%99%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>这是我的第一篇博客，什么也没有诶w(ﾟДﾟ)w！！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/22/hello-world/"/>
      <url>/2024/05/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
